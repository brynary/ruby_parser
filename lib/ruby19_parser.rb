#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby19Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-479,8,69,70,71,12,57,-479,-479,-479,63,64,-479,-479,-479,67,-479,65',
'66,68,32,33,72,73,-479,259,-479,-479,-479,31,30,29,95,94,96,97,-479',
'-479,22,-479,-479,-479,-479,-479,11,47,10,13,99,98,100,89,56,91,90,92',
'733,93,101,102,571,87,88,571,44,45,43,-479,-479,-479,-479,-479,-479',
'-479,-479,-479,-479,-479,-479,-479,-479,259,-95,-479,-479,-479,42,-479',
'-479,35,551,-479,58,59,-479,-479,60,-479,37,-479,852,-479,46,-479,-479',
'-479,-479,-479,-479,-479,23,-479,258,-479,-105,85,79,81,82,83,84,-93',
'911,-101,80,86,-479,-479,-479,-479,-559,-479,-101,62,-479,-479,571,-559',
'-559,-559,-102,531,-559,-559,-559,79,-559,-107,-101,-95,207,208,571',
'80,811,-559,-559,-559,-559,207,208,571,732,-102,816,-104,-559,-559,258',
'-559,-559,-559,-559,-559,107,-103,-104,107,-103,106,-556,107,106,-106',
'-95,713,106,-95,-93,-106,-99,724,811,-95,210,725,550,-559,-559,-559',
'-559,-559,-559,-559,-559,-559,-559,-559,-559,-559,-559,713,713,-559',
'-559,-559,-100,767,-559,-96,809,-559,259,-93,-559,-559,-93,-559,-92',
'-559,211,-559,-93,-559,-559,-559,-559,-559,-559,-559,211,-559,-559,-559',
'-555,-93,-101,612,791,211,107,-101,-98,-555,-413,106,-559,-559,-559',
'-559,-284,-559,207,208,-559,-103,107,-284,-284,-284,-493,106,766,-284',
'-284,107,-284,-102,888,-104,106,-95,-102,-94,-104,107,824,-404,-97,-103',
'106,649,649,-559,-103,-90,-284,-284,-485,-284,-284,-284,-284,-284,791',
'-485,577,-413,626,258,611,107,107,599,-413,599,106,106,-99,-559,-104',
'-91,765,-413,807,648,648,-284,-284,-284,-284,-284,-284,-284,-284,-284',
'-284,-284,-284,-284,-284,-413,599,-284,-284,-284,-559,631,625,-553,-95',
'-284,211,-559,-284,211,-104,804,-555,-284,-494,-284,-559,-284,-284,-284',
'-284,-284,-284,-284,-102,-284,-559,-284,601,600,601,600,613,-559,-559',
'649,459,743,-555,-559,-284,-284,-559,-96,-93,-284,-559,-559,-559,-105',
'-102,211,-559,-559,649,-559,-482,601,600,607,-559,798,-100,-482,-559',
'-85,231,-552,-553,648,-484,-71,-482,307,308,-559,-559,-484,-559,-559',
'-559,-559,-559,565,-107,335,334,333,648,336,-553,565,-488,335,334,333',
'599,336,228,-488,107,599,230,229,604,106,-559,-559,-559,-559,-559,-559',
'-559,-559,-559,-559,-559,-559,-559,-559,-479,599,-559,-559,-559,797',
'632,-479,-482,791,-559,231,-552,-559,-487,-482,-479,-494,-559,-493,-559',
'-487,-559,-559,-559,-559,-559,-559,-559,-479,-559,-559,-559,231,-552',
'679,-479,601,600,602,205,706,601,600,-284,-559,-559,531,-94,880,-559',
'-284,-284,-284,-103,751,-284,-284,-284,-91,-284,-90,601,600,597,-100',
'252,-99,231,-490,-284,-284,-284,253,107,543,-490,261,545,106,-284,-284',
'-98,-284,-284,-284,-284,-284,-107,-97,543,-489,-492,542,-285,-106,261',
'-92,-489,-492,228,-285,594,-101,230,229,226,227,-492,595,-285,-284,-284',
'-284,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284,211,579',
'-284,-284,-284,522,768,-284,580,679,-284,508,523,-284,-284,506,-284',
'578,-284,770,-284,521,-284,-284,-284,-284,-284,-284,-284,211,-284,777',
'-284,335,334,333,565,336,335,334,333,493,336,493,-277,-284,-284,-284',
'-284,-482,-284,-277,-486,-284,-105,752,-482,-482,-482,-486,-277,-482',
'-482,-482,565,-482,335,334,333,340,336,820,791,-482,561,-482,-482,-482',
'344,343,347,346,-265,815,-264,-482,-482,-285,-482,-482,-482,-482,-482',
'565,-285,335,334,333,543,336,107,545,340,-285,565,106,335,334,333,543',
'336,692,545,347,346,746,-482,-482,-482,-482,-482,-482,-482,-482,-482',
'-482,-482,-482,-482,-482,107,561,-482,-482,-482,106,-482,-482,207,208',
'-482,745,561,-482,-482,851,-482,716,-482,577,-482,564,-482,-482,-482',
'-482,-482,-482,-482,709,-482,777,-482,335,334,333,-491,336,110,111,112',
'113,114,-491,728,-482,-482,-482,-482,-560,-482,947,-491,-482,-482,211',
'-560,-560,-560,704,729,-560,-560,-560,565,-560,335,334,333,340,336,207',
'208,692,-560,-560,-560,-560,344,343,347,346,526,527,211,-560,-560,-491',
'-560,-560,-560,-560,-560,565,-491,335,334,333,686,336,107,685,340,-491',
'565,106,335,334,333,679,336,820,791,347,346,537,-560,-560,-560,-560',
'-560,-560,-560,-560,-560,-560,-560,-560,-560,-560,107,561,-560,-560',
'-560,106,231,-560,207,208,-560,854,561,-560,-560,856,-560,859,-560,860',
'-560,564,-560,-560,-560,-560,-560,-560,-560,107,-560,-560,-560,338,106',
'335,334,333,228,336,207,208,230,229,-492,-560,-560,-560,-560,-278,-560',
'-492,692,-560,862,211,-278,-278,-278,668,-492,-278,-278,-278,565,-278',
'335,334,333,231,336,340,-85,411,679,-278,-278,-278,413,412,344,343,347',
'346,211,-278,-278,-285,-278,-278,-278,-278,-278,565,-285,335,334,333',
'868,336,211,228,340,-285,-263,230,229,226,227,872,874,211,231,347,346',
'231,-278,-278,-278,-278,-278,-278,-278,-278,-278,-278,-278,-278,-278',
'-278,231,561,-278,-278,-278,203,231,-278,638,882,-278,883,204,-278,-278',
'635,-278,885,-278,261,-278,202,-278,-278,-278,-278,-278,-278,-278,624',
'-278,565,-278,335,334,333,534,336,110,111,112,113,114,535,952,-278,-278',
'-278,-278,-561,-278,953,457,-278,623,211,-561,-561,-561,619,951,-561',
'-561,-561,565,-561,335,334,333,340,336,-277,-263,617,-561,-561,-561',
'-561,-277,211,347,346,610,606,582,-561,-561,-277,-561,-561,-561,-561',
'-561,565,895,335,334,333,896,336,211,565,340,335,334,333,801,336,335',
'334,333,899,336,347,346,-266,-561,-561,-561,-561,-561,-561,-561,-561',
'-561,-561,-561,-561,-561,-561,581,561,-561,-561,-561,-331,403,-561,577',
'561,-561,568,-331,-561,-561,567,-561,559,-561,558,-561,-331,-561,-561',
'-561,-561,-561,-561,-561,906,-561,-561,-561,728,555,455,909,553,211',
'912,727,508,456,547,546,-561,-561,-561,-561,729,-561,457,231,-561,281',
'69,70,71,12,57,923,843,844,63,64,845,101,102,67,811,65,66,68,32,33,72',
'73,110,111,112,113,114,31,30,29,95,94,96,97,811,801,22,335,334,333,811',
'336,11,47,927,13,99,98,100,89,56,91,90,92,-284,93,101,102,533,87,88',
'-284,44,45,43,882,-556,532,528,-284,-284,565,930,335,334,333,-284,336',
'931,261,211,-556,935,264,42,-284,524,35,939,942,58,59,944,811,60,811',
'37,517,948,565,46,335,334,333,949,336,516,211,23,340,-70,508,954,85',
'79,81,82,83,84,506,347,346,80,86,281,69,70,71,12,57,503,62,261,63,64',
'882,493,340,67,210,65,66,68,32,33,72,73,461,347,346,460,458,31,30,29',
'95,94,96,97,414,409,22,110,111,112,113,114,11,47,393,13,99,98,100,89',
'56,91,90,92,-284,93,101,102,390,87,88,-284,44,45,43,685,-556,366,211',
'306,-284,565,305,335,334,333,811,336,882,250,978,979,980,982,42,811',
'811,283,811,-556,58,59,-555,211,60,206,37,201,200,199,46,338,103,335',
'334,333,3,336,23,340,811,,,85,79,81,82,83,84,,347,346,80,86,281,69,70',
'71,12,57,,62,,63,64,,,,67,340,65,66,68,32,33,72,73,,344,343,347,346',
'31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,565,,335,334,333,,336,,,,,,,42,,,35,',
',58,59,,,60,,37,,,,46,338,,335,334,333,,336,23,340,,,,85,79,81,82,83',
'84,,347,346,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,340,65,66,68,32',
'33,72,73,,344,343,347,346,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99',
'98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,42,,,35,,,58,59,,,60,,37,,,,46,338,,335,334,333,,336,23,,,,,85,79',
'81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,340,65,66,68',
'32,33,72,73,,344,343,347,346,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13',
'99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,',
',,,,,42,,,35,,,58,59,,,60,,37,,,,46,777,,335,334,333,,336,23,,,,,85',
'79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,340,65,66',
'68,32,33,72,73,,344,343,347,346,31,30,29,95,94,96,97,,,22,,,,,,11,47',
',13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,',
',,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,338,,335,334,333,,336,23,,,',
',85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,340',
'65,66,68,32,33,72,73,,344,343,347,346,31,30,29,95,94,96,97,,,22,,,,',
',11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,777,,335,334,333,,336',
'23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67',
'340,65,66,68,32,33,72,73,,344,343,347,346,31,30,29,95,94,96,97,,,22',
',,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43',
'231,-578,-578,-578,-578,237,239,,,-578,-578,,,,,,245,246,,42,,,35,,',
'58,59,,,60,,37,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85',
'79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,-578,-578,-578,-578',
'237,239,,,-578,-578,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234',
'46,230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86',
'281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30',
'29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,231,-578,-578,-578,-578,237,239,,,-578,-578,,,',
',,245,246,,42,,,283,,,58,59,,,60,,37,228,,234,46,230,229,226,227,238',
'236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62',
',63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,',
',,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231',
',,,,,,,,,,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229',
'226,227,,,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57',
',62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22',
',,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43',
'231,-578,-578,-578,-578,237,239,,,-578,-578,,,,,,245,246,,42,,,35,,',
'58,59,,,60,,37,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85',
'79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,235,240,241,242,237',
'239,247,248,243,244,,-578,-578,,,245,246,,42,,,35,,,58,59,,,60,,37,228',
',234,46,230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80',
'86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31',
'30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246,,42,,,35,,,58,59,,,60',
',37,228,,234,46,230,229,226,227,,,232,23,233,,,,85,79,81,82,83,84,,',
',80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,',
',,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,231,235,240,241,242,237,239,247,248,243',
'244,,-578,-578,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229',
'226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71',
'12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,',
'44,45,43,231,235,240,241,242,237,239,,,243,244,,,,,,245,246,,42,,,35',
',,58,59,,,60,,37,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85',
'79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246',
',42,,,283,,,58,59,,,60,,37,228,,234,46,230,229,226,227,,,232,23,233',
',,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,-578,-578,-578,-578',
'237,239,,,-578,-578,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234',
'46,230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86',
'281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30',
'29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,231,-578,-578,-578,-578,237,239,,,-578,-578,,,',
',,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,238',
'236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62',
',63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,',
',,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231',
',,,,,,,,,,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229',
'226,227,,,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57',
',62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22',
',,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43',
'231,235,240,241,242,237,239,247,,243,244,,,,,,245,246,,42,,,35,,,58',
'59,,,60,,37,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85,79',
'81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32',
'33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246',
',42,,,35,,,58,59,,,60,,37,228,,,46,230,229,226,227,,,,23,,,,,85,79,81',
'82,83,84,,,,80,86,8,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,10,13,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246,,42',
',,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,,,,23,,,,,85,79,81',
'82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246,,42',
',,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,,,,23,,,,,85,79,81',
'82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58',
'59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70',
'71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94',
'96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23',
',,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,',
'65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99',
'98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,',
'80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,',
',31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,',
'93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60',
',37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57',
',62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22',
',,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85',
'79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,273,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295',
'301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,',
'46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64',
',,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,',
',,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,',
',,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72',
'73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,288,,,58,59',
',,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,',
',,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,',
',,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,',
',,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,636',
',47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,235',
'240,241,242,237,239,247,248,243,244,,224,225,,,245,246,,216,,,222,,',
'58,59,,,60,,,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85,79',
'81,82,83,84,,,,80,86,107,249,69,70,71,106,57,62,,,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,360',
',,35,,,58,59,,,60,,37,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69',
'70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94',
'96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,',
',,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67',
',65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47',
',,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,',
',,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,',
',,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,',
'62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302',
',,,,,,,,,,,,,,,,,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72',
'73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,338,,335,334,333,46,336,,,,,,,221,,,,-577,85,79,81,82,83,84',
'-577,-577,-577,80,86,-577,-577,-577,,-577,,,62,,340,737,,,-577,-577',
'-577,,,344,343,347,346,,,-577,-577,,-577,-577,-577,-577,-577,,,,,,,',
',,,,,,,,,,,,,,,,-577,-577,-577,-577,-577,-577,-577,-577,-577,-577,-577',
'-577,-577,-577,,,-577,-577,-577,,,-577,,261,-577,,,-577,-577,,-577,',
'-577,,-577,,-577,-577,-577,-577,-577,-577,-577,,-577,-577,-577,,,,,',
',,,,,,,-577,-577,,-577,,-577,69,70,71,,57,,,,63,64,,,,67,,65,66,68,32',
'33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,636,296,,,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,,,302,,231,235,240,241,242,237,239,247,248,243,244,,224,225',
',,245,246,292,,,222,,,58,59,,,60,,,,228,,234,,230,229,226,227,238,236',
'232,,233,,,85,79,81,82,83,84,,,,80,86,,,249,304,-240,,,62,69,70,71,12',
'57,,,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,',
'22,,,,,,11,47,10,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,',
',,85,79,81,82,83,84,,,,80,86,69,70,71,,57,403,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85',
'79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,',
',62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,12,57,,,62,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59',
',,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302',
',,,,,,,,,,,,,,,,,,,292,,,288,,,58,59,,,60,,287,,,,,,,,,,,,,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,',
',,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,',
',,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,',
',85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,',
'80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30',
'29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,419,,,,46',
',,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,',
',67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31',
'30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273',
',271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,',
',,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,',
',,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,',
',85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,419,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29',
'95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69',
'70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94',
'96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,',
',,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,211,69',
'70,71,,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94',
'96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,',
',,,,,221,,,,-291,85,79,81,82,83,84,-291,-291,-291,80,86,-291,-291,-291',
',-291,,,62,,,,,,,-291,-291,,,,,,,,,-291,-291,,-291,-291,-291,-291,-291',
',,,,,,,,,,,,,,,,,,,,,,,-291,-291,-291,-291,-291,-291,-291,-291,-291',
'-291,-291,-291,-291,-291,,,-291,-291,-291,,,-291,,264,-291,,,-291,-291',
',-291,,-291,,-291,,-291,-291,-291,-291,-291,-291,-291,,-291,,-291,,',
',,,,,,,,,,-291,-291,,-291,-412,-291,69,70,71,,57,-412,-412,-412,63,64',
'-412,-412,-412,67,-412,65,66,68,298,299,72,73,,-412,-412,-412,,294,295',
'301,95,94,96,97,-412,-412,223,-412,-412,-412,-412,-412,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,-412,-412,-412,-412,-412',
'-412,-412,-412,-412,-412,-412,-412,-412,-412,,,-412,-412,-412,216,,-412',
'222,261,-412,58,59,-412,-412,60,-412,,-412,,-412,46,-412,-412,-412,-412',
'-412,-412,-412,221,-412,-412,-412,,85,79,81,82,83,84,,,,80,86,-412,-412',
',-412,,-412,,62,69,70,71,,57,,,,63,64,,,,67,,65,66,68,32,33,72,73,,',
',,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,',
',,,,,,,,,,,,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,',
',31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,',
',,,,,,,,,,,,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,',
',,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,',
'62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32',
'33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,12,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29',
'95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,',
',,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,403,,62,63,64,',
',,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47',
',,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,',
'80,86,211,69,70,71,,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31',
'30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,',
'46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64',
',,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47',
',,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,',
',,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,',
',31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69',
'70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275',
'93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60',
',663,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,419,,,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,12,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,',
'35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69',
'70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,',
',,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,749,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,222,,,58,59,,,60,,,,,,,,,,,,,,,,',
',,85,79,81,82,83,84,,,,80,86,69,70,71,519,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,338,,335,334,333,46,336,,,,,,,221,,,,-577,85,79,81',
'82,83,84,-577,-577,-577,80,86,-577,-577,-577,,-577,,,62,,340,737,,,',
'-577,,,,344,343,347,346,,,-577,-577,,-577,-577,-577,-577,-577,,,,,,641',
'439,,,642,,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,-577',
'153,154,140,141,,,-577,,,261,,261,-577,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,,,155,-577,,,,,,69,70,71,,57,,,-577,63,64',
',,-577,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,',
',47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,',
',,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,',
',,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,296,,,99,98,100,583,56,91,90,584,,93,101,102,,87,88,,,,302,,,',
',,,,,,,,,,,,,,,,585,,,222,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73',
',,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,296,,,99,98,100,583,56,91,90,584,,93,101,102,,87,88,,,,302',
',,,,,,,,,,,,,,,,,,,585,,,222,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72',
'73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,,663,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71',
',57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97',
',,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,,,,,',
',,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,271,,46',
',,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,',
',67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,',
',47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,',
',,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73',
',,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,537,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295',
'301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,',
',,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,',
'67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99',
'98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,',
'80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30',
'29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,',
',,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67',
',65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47',
',,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,,,271,,46,,,,,,,,221,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72',
'73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,918,,,222,,,58,59',
',,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,663,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,663,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,',
'80,86,69,70,71,12,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31',
'30,29,95,94,96,97,,,22,,,,,,11,47,10,13,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37',
',,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85',
'79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,338,273,335,334,333,46,336,,,,,,,221,,,,-577,85,79,81,82',
'83,84,-577,-577,-577,80,86,-577,-577,-577,,-577,,,62,,340,327,,,,-577',
',,,344,343,347,346,,,-577,-577,,-577,-577,-577,-577,-577,,,,,,969,439',
',,968,,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,-577',
'153,154,140,141,,,-577,,,261,,261,-577,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,,,155,-577,,,,,,69,70,71,,57,,,-577,63,64',
',,-577,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,',
',,,,,,,,,,,,,,908,,,222,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,',
',,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,',
'62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,620,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,235,240,241,242,237',
'239,247,248,243,244,,224,225,,,245,246,,216,,,222,,,58,59,,,60,,,228',
',234,46,230,229,226,227,238,236,232,221,233,,,,85,79,81,82,83,84,,,',
'80,86,,249,,,,,,62,166,177,167,190,163,183,173,172,193,194,188,171,170',
'165,191,195,196,175,164,178,182,184,176,169,,,,185,192,187,186,179,189',
'174,162,181,180,,,,,,161,168,159,160,156,157,158,118,120,117,,119,,',
',,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128',
',,155,85,,,,,,,,,,86,166,177,167,190,163,183,173,172,193,194,188,171',
'170,165,191,195,196,175,164,178,182,184,176,169,,,,185,192,187,186,179',
'189,174,162,181,180,,,,,,161,168,159,160,156,157,158,118,120,,,119,',
',,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128',
',,155,85,,,,,,,,,,86,166,177,167,190,163,183,173,172,193,194,188,171',
'170,165,191,195,196,175,164,178,182,184,176,169,,,,185,192,187,186,179',
'189,174,162,181,180,,,,,,161,168,159,160,156,157,158,118,120,,,119,',
',,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128',
',,155,85,,,,,,,,,,86,166,177,167,190,163,183,173,172,193,194,188,171',
'170,165,191,195,196,175,164,178,182,184,176,169,,,,185,192,187,186,179',
'189,174,162,181,180,,,,,,161,168,159,160,156,157,158,118,120,,,119,',
',,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128',
',,155,85,,,,,,,,,,86,166,177,167,190,163,183,173,172,193,194,188,171',
'170,165,191,195,196,175,164,178,182,184,176,169,,,,185,192,187,186,179',
'189,174,162,181,180,,,,,,161,168,159,160,156,157,158,118,120,,,119,',
',,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128',
',,155,166,177,167,190,163,183,173,172,193,194,188,171,170,165,191,195',
'196,175,164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181',
'180,,,,,,161,168,159,160,156,157,158,118,120,400,399,119,,401,,,,,,',
'151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,',
',,,,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,,,155',
'166,177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196',
'175,164,178,182,184,176,169,,,,185,192,187,375,374,376,373,162,181,180',
',,,,,161,168,159,160,370,371,372,368,120,91,90,369,,93,,,,,,,151,152',
',148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,382,',
',,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,828,439,155',
',829,,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154',
'140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127',
'149,128,428,432,155,,429,,,,,,,,,151,152,,148,130,131,132,139,136,138',
',,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,639,432,155,,640,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,972,432,155,,973,,',
',,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,672,432,155,,673,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,675,439,155,,676,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,435,439,155,,434,,',
',,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,490,432,155,,491,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129,150,147,146,142',
'143,137,135,127,149,128,490,432,155,,491,,,,,,,,,151,152,,148,130,131',
'132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129',
'150,147,146,142,143,137,135,127,149,128,974,439,155,,975,,,,,,,,,151',
'152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261',
',,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,641,439',
'155,,642,,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153',
'154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135',
'127,149,128,721,439,155,,722,,,,,,,,,151,152,,148,130,131,132,139,136',
'138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147',
'146,142,143,137,135,127,149,128,719,432,155,,720,,,,,,,,,151,152,,148',
'130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,',
',145,144,,129,150,147,146,142,143,137,135,127,149,128,490,432,155,,491',
',,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,639,432,155,,640,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,,,155,231,235,240,241,242,237,239,247,248',
'243,244,,224,225,,,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238',
'236,232,,233,231,235,240,241,242,237,239,247,248,243,244,,224,225,,249',
'245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231',
'235,240,241,242,237,239,247,248,243,244,,224,225,,249,245,246,,,,,,',
',,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241,242',
'237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234',
',230,229,226,227,238,236,232,,233,231,235,240,241,242,237,239,247,248',
'243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227',
'238,236,232,,233,231,235,240,241,242,237,239,247,248,243,244,,224,225',
',249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233',
'231,235,240,241,242,237,239,247,248,243,244,,224,225,,249,245,246,,',
',,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241',
'242,237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228',
',234,,230,229,226,227,238,236,232,,233,231,235,240,241,242,237,239,247',
'248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226',
'227,238,236,232,,233,231,235,240,241,242,237,239,247,248,243,244,,224',
'225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232',
',233,231,235,240,241,242,237,239,247,248,243,244,,224,225,,249,245,246',
',,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240',
'241,242,237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,',
'228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241,242,237,239',
'247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229',
'226,227,238,236,232,,233,231,235,240,241,242,237,239,247,248,243,244',
',224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236',
'232,,233,,,,,,,,,,,,,,,211,249' ]
        racc_action_table = arr = ::Array.new(23416, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'89,2,2,2,2,2,2,89,89,89,2,2,89,89,89,2,89,2,2,2,2,2,2,2,89,297,89,89',
'89,2,2,2,2,2,2,2,89,89,2,89,89,89,89,89,2,2,2,2,2,2,2,2,2,2,2,2,589',
'2,2,2,351,2,2,350,2,2,2,89,89,89,89,89,89,89,89,89,89,89,89,89,89,61',
'673,89,89,89,2,89,89,2,326,89,2,2,89,89,2,89,2,89,769,89,2,89,89,89',
'89,89,89,89,2,89,297,89,722,2,2,2,2,2,2,672,865,826,2,2,89,89,89,89',
'641,89,986,2,89,89,871,641,641,641,719,458,641,641,641,77,641,361,769',
'673,452,452,884,77,701,641,641,641,641,740,740,825,589,972,705,973,641',
'641,61,641,641,641,641,641,351,974,720,350,721,351,722,589,350,581,673',
'827,589,673,672,458,357,585,699,673,22,585,326,641,641,641,641,641,641',
'641,641,641,641,641,641,641,641,574,573,641,641,641,358,641,641,722',
'698,641,28,672,641,641,672,641,826,641,22,641,672,641,641,641,641,641',
'641,641,452,641,641,641,721,719,986,394,710,740,871,986,361,974,786',
'871,641,641,641,641,434,641,683,683,641,641,884,434,434,434,214,884',
'640,434,434,825,434,972,825,973,825,720,972,721,973,827,715,28,581,974',
'827,655,488,675,974,357,434,434,375,434,434,434,434,434,933,375,933',
'786,429,28,394,574,573,608,786,396,574,573,214,828,640,358,639,786,695',
'655,488,434,434,434,434,434,434,434,434,434,434,434,434,434,434,786',
'391,434,434,434,675,434,428,584,429,434,683,675,434,718,429,694,675',
'434,215,434,675,434,434,434,434,434,434,434,639,434,828,434,608,608',
'396,396,396,828,675,498,217,608,828,435,434,434,828,434,428,434,435',
'435,435,434,428,693,435,435,497,435,584,391,391,391,828,690,215,584',
'435,667,465,583,584,498,374,667,584,43,43,435,435,374,435,435,435,435',
'435,564,217,564,564,564,497,564,584,815,371,815,815,815,386,815,465',
'371,893,388,465,465,388,893,435,435,435,435,435,435,435,435,435,435',
'435,435,435,435,583,384,435,435,435,689,435,583,369,684,435,682,583',
'435,373,369,583,41,435,40,435,373,435,435,435,435,435,435,435,368,435',
'435,435,681,583,678,368,386,386,386,18,564,388,388,642,435,435,306,435',
'815,435,642,642,642,435,621,642,642,642,41,642,40,384,384,384,41,27',
'40,483,372,642,642,642,27,354,688,372,677,688,354,642,642,18,642,642',
'642,642,642,18,306,317,370,290,317,725,306,674,621,370,290,483,725,378',
'621,483,483,483,483,290,378,725,642,642,642,642,642,642,642,642,642',
'642,642,642,642,642,671,359,642,642,642,291,642,642,359,669,642,662',
'291,642,642,660,642,359,642,645,642,291,642,642,642,642,642,642,642',
'643,642,648,642,648,648,648,704,648,704,704,704,633,704,627,293,642',
'642,642,642,92,642,293,376,642,642,622,92,92,92,376,293,92,92,92,809',
'92,809,809,809,648,809,957,957,92,704,92,92,92,648,648,648,648,748,704',
'618,92,92,954,92,92,92,92,92,706,954,706,706,706,322,706,278,322,809',
'954,340,278,340,340,340,318,340,648,318,809,809,614,92,92,92,92,92,92',
'92,92,92,92,92,92,92,92,733,706,92,92,92,733,92,92,734,734,92,612,340',
'92,92,753,92,576,92,575,92,340,92,92,92,92,92,92,92,570,92,856,92,856',
'856,856,289,856,666,666,666,666,666,289,907,92,92,92,92,439,92,907,289',
'92,92,566,439,439,439,563,907,439,439,439,923,439,923,923,923,856,923',
'349,349,552,439,439,439,439,856,856,856,856,302,302,540,439,439,915',
'439,439,439,439,439,927,915,927,927,927,539,927,5,538,923,915,561,5',
'561,561,561,529,561,708,708,923,923,525,439,439,439,439,439,439,439',
'439,439,439,439,439,439,439,738,927,439,439,439,738,464,439,20,20,439',
'771,561,439,439,772,439,773,439,775,439,561,439,439,439,439,439,439',
'439,835,439,439,439,327,835,327,327,327,464,327,315,315,464,464,916',
'439,439,439,439,56,439,916,776,439,777,520,56,56,56,518,916,56,56,56',
'859,56,859,859,859,484,859,327,515,117,785,56,56,56,117,117,327,327',
'327,327,514,56,56,524,56,56,56,56,56,816,524,816,816,816,789,816,500',
'484,859,524,792,484,484,484,484,793,799,499,469,859,859,468,56,56,56',
'56,56,56,56,56,56,56,56,56,56,56,467,816,56,56,56,17,466,56,454,817',
'56,818,17,56,56,444,56,821,56,436,56,17,56,56,56,56,56,56,56,427,56',
'982,56,982,982,982,309,982,513,513,513,513,513,309,917,56,56,56,56,440',
'56,917,309,56,426,423,440,440,440,420,917,440,440,440,811,440,811,811',
'811,982,811,919,417,415,440,440,440,440,919,831,982,982,393,390,362',
'440,440,919,440,440,440,440,440,880,836,880,880,880,837,880,838,882',
'811,882,882,882,874,882,874,874,874,847,874,811,811,848,440,440,440',
'440,440,440,440,440,440,440,440,440,440,440,360,880,440,440,440,48,356',
'440,355,882,440,348,48,440,440,345,440,338,440,331,440,48,440,440,440',
'440,440,440,440,861,440,440,440,587,330,213,863,329,703,866,587,323',
'213,320,319,440,440,440,440,587,440,213,311,440,914,914,914,914,914',
'914,875,741,741,914,914,741,741,741,914,876,914,914,914,914,914,914',
'914,9,9,9,9,9,914,914,914,914,914,914,914,877,692,914,692,692,692,878',
'692,914,914,879,914,914,914,914,914,914,914,914,914,829,914,914,914',
'308,914,914,829,914,914,914,881,829,307,303,975,829,807,886,807,807',
'807,975,807,887,301,296,975,892,295,914,975,292,914,900,901,914,914',
'902,903,914,905,914,286,908,558,914,558,558,558,910,558,285,284,914',
'807,282,272,918,914,914,914,914,914,914,269,807,807,914,914,283,283',
'283,283,283,283,268,914,257,283,283,928,254,558,283,223,283,283,283',
'283,283,283,283,219,558,558,218,216,283,283,283,283,283,283,283,197',
'115,283,280,280,280,280,280,283,283,84,283,283,283,283,283,283,283,283',
'283,676,283,283,283,83,283,283,676,283,283,283,950,676,69,47,42,676',
'942,39,942,942,942,955,942,956,25,961,962,963,964,283,965,966,283,967',
'968,283,283,969,971,283,19,283,16,15,13,283,804,3,804,804,804,1,804',
'283,942,987,,,283,283,283,283,283,283,,942,942,283,283,742,742,742,742',
'742,742,,283,,742,742,,,,742,804,742,742,742,742,742,742,742,,804,804',
'804,804,742,742,742,742,742,742,742,,,742,,,,,,742,742,,742,742,742',
'742,742,742,742,742,742,,742,742,742,,742,742,,742,742,742,,,,,,,944',
',944,944,944,,944,,,,,,,742,,,742,,,742,742,,,742,,742,,,,742,555,,555',
'555,555,,555,742,944,,,,742,742,742,742,742,742,,944,944,742,742,929',
'929,929,929,929,929,,742,,929,929,,,,929,555,929,929,929,929,929,929',
'929,,555,555,555,555,929,929,929,929,929,929,929,,,929,,,,,,929,929',
',929,929,929,929,929,929,929,929,929,,929,929,929,,929,929,,929,929',
'929,,,,,,,,,,,,,,,,,,,,929,,,929,,,929,929,,,929,,929,,,,929,553,,553',
'553,553,,553,929,,,,,929,929,929,929,929,929,,,,929,929,551,551,551',
'551,551,551,,929,,551,551,,,,551,553,551,551,551,551,551,551,551,,553',
'553,553,553,551,551,551,551,551,551,551,,,551,,,,,,551,551,,551,551',
'551,551,551,551,551,551,551,,551,551,551,,551,551,,551,551,551,,,,,',
',,,,,,,,,,,,,,551,,,551,,,551,551,,,551,,551,,,,551,939,,939,939,939',
',939,551,,,,,551,551,551,551,551,551,,,,551,551,222,222,222,222,222',
'222,,551,,222,222,,,,222,939,222,222,222,222,222,222,222,,939,939,939',
'939,222,222,222,222,222,222,222,,,222,,,,,,222,222,,222,222,222,222',
'222,222,222,222,222,,222,222,222,,222,222,,222,222,222,,,,,,,,,,,,,',
',,,,,,222,,,222,,,222,222,,,222,,222,,,,222,737,,737,737,737,,737,222',
',,,,222,222,222,222,222,222,,,,222,222,934,934,934,934,934,934,,222',
',934,934,,,,934,737,934,934,934,934,934,934,934,,737,737,737,737,934',
'934,934,934,934,934,934,,,934,,,,,,934,934,,934,934,934,934,934,934',
'934,934,934,,934,934,934,,934,934,,934,934,934,,,,,,,,,,,,,,,,,,,,934',
',,934,,,934,934,,,934,,934,,,,934,854,,854,854,854,,854,934,,,,,934',
'934,934,934,934,934,,,,934,934,889,889,889,889,889,889,,934,,889,889',
',,,889,854,889,889,889,889,889,889,889,,854,854,854,854,889,889,889',
'889,889,889,889,,,889,,,,,,889,889,,889,889,889,889,889,889,889,889',
'889,,889,889,889,,889,889,,889,889,889,481,481,481,481,481,481,481,',
',481,481,,,,,,481,481,,889,,,889,,,889,889,,,889,,889,481,,481,889,481',
'481,481,481,481,481,481,889,481,,,,889,889,889,889,889,889,,,,889,889',
'937,937,937,937,937,937,,889,,937,937,,,,937,,937,937,937,937,937,937',
'937,,,,,,937,937,937,937,937,937,937,,,937,,,,,,937,937,,937,937,937',
'937,937,937,937,937,937,,937,937,937,,937,937,,937,937,937,479,479,479',
'479,479,479,479,,,479,479,,,,,,479,479,,937,,,937,,,937,937,,,937,,937',
'479,,479,937,479,479,479,479,479,479,479,937,479,,,,937,937,937,937',
'937,937,,,,937,937,288,288,288,288,288,288,,937,,288,288,,,,288,,288',
'288,288,288,288,288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,',
'288,288,,288,288,288,288,288,288,288,288,288,,288,288,288,,288,288,',
'288,288,288,473,473,473,473,473,473,473,,,473,473,,,,,,473,473,,288',
',,288,,,288,288,,,288,,288,473,,473,288,473,473,473,473,473,473,473',
'288,473,,,,288,288,288,288,288,288,,,,288,288,822,822,822,822,822,822',
',288,,822,822,,,,822,,822,822,822,822,822,822,822,,,,,,822,822,822,822',
'822,822,822,,,822,,,,,,822,822,,822,822,822,822,822,822,822,822,822',
',822,822,822,,822,822,,822,822,822,477,,,,,,,,,,,,,,,,477,477,,822,',
',822,,,822,822,,,822,,822,477,,477,822,477,477,477,477,,,477,822,477',
',,,822,822,822,822,822,822,,,,822,822,938,938,938,938,938,938,,822,',
'938,938,,,,938,,938,938,938,938,938,938,938,,,,,,938,938,938,938,938',
'938,938,,,938,,,,,,938,938,,938,938,938,938,938,938,938,938,938,,938',
'938,938,,938,938,,938,938,938,480,480,480,480,480,480,480,,,480,480',
',,,,,480,480,,938,,,938,,,938,938,,,938,,938,480,,480,938,480,480,480',
'480,480,480,480,938,480,,,,938,938,938,938,938,938,,,,938,938,314,314',
'314,314,314,314,,938,,314,314,,,,314,,314,314,314,314,314,314,314,,',
',,,314,314,314,314,314,314,314,,,314,,,,,,314,314,,314,314,314,314,314',
'314,314,314,314,,314,314,314,,314,314,,314,314,314,463,463,463,463,463',
'463,463,463,463,463,463,,463,463,,,463,463,,314,,,314,,,314,314,,,314',
',314,463,,463,314,463,463,463,463,463,463,463,314,463,,,,314,314,314',
'314,314,314,,,,314,314,572,572,572,572,572,572,,314,,572,572,,,,572',
',572,572,572,572,572,572,572,,,,,,572,572,572,572,572,572,572,,,572',
',,,,,572,572,,572,572,572,572,572,572,572,572,572,,572,572,572,,572',
'572,,572,572,572,474,,,,,,,,,,,,,,,,474,474,,572,,,572,,,572,572,,,572',
',572,474,,474,572,474,474,474,474,,,474,572,474,,,,572,572,572,572,572',
'572,,,,572,572,199,199,199,199,199,199,,572,,199,199,,,,199,,199,199',
'199,199,199,199,199,,,,,,199,199,199,199,199,199,199,,,199,,,,,,199',
'199,,199,199,199,199,199,199,199,199,199,,199,199,199,,199,199,,199',
'199,199,462,462,462,462,462,462,462,462,462,462,462,,462,462,,,462,462',
',199,,,199,,,199,199,,,199,,199,462,,462,199,462,462,462,462,462,462',
'462,199,462,,,,199,199,199,199,199,199,,,,199,199,779,779,779,779,779',
'779,,199,,779,779,,,,779,,779,779,779,779,779,779,779,,,,,,779,779,779',
'779,779,779,779,,,779,,,,,,779,779,,779,779,779,779,779,779,779,779',
'779,,779,779,779,,779,779,,779,779,779,485,485,485,485,485,485,485,',
',485,485,,,,,,485,485,,779,,,779,,,779,779,,,779,,779,485,,485,779,485',
'485,485,485,485,485,485,779,485,,,,779,779,779,779,779,779,,,,779,779',
'35,35,35,35,35,35,,779,,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35',
'35,35,35,35,35,,,35,,,,,,35,35,,35,35,35,35,35,35,35,35,35,,35,35,35',
',35,35,,35,35,35,475,,,,,,,,,,,,,,,,475,475,,35,,,35,,,35,35,,,35,,35',
'475,,475,35,475,475,475,475,,,475,35,475,,,,35,35,35,35,35,35,,,,35',
'35,832,832,832,832,832,832,,35,,832,832,,,,832,,832,832,832,832,832',
'832,832,,,,,,832,832,832,832,832,832,832,,,832,,,,,,832,832,,832,832',
'832,832,832,832,832,832,832,,832,832,832,,832,832,,832,832,832,482,482',
'482,482,482,482,482,,,482,482,,,,,,482,482,,832,,,832,,,832,832,,,832',
',832,482,,482,832,482,482,482,482,482,482,482,832,482,,,,832,832,832',
'832,832,832,,,,832,832,569,569,569,569,569,569,,832,,569,569,,,,569',
',569,569,569,569,569,569,569,,,,,,569,569,569,569,569,569,569,,,569',
',,,,,569,569,,569,569,569,569,569,569,569,569,569,,569,569,569,,569',
'569,,569,569,569,478,478,478,478,478,478,478,,,478,478,,,,,,478,478',
',569,,,569,,,569,569,,,569,,569,478,,478,569,478,478,478,478,478,478',
'478,569,478,,,,569,569,569,569,569,569,,,,569,569,868,868,868,868,868',
'868,,569,,868,868,,,,868,,868,868,868,868,868,868,868,,,,,,868,868,868',
'868,868,868,868,,,868,,,,,,868,868,,868,868,868,868,868,868,868,868',
'868,,868,868,868,,868,868,,868,868,868,476,,,,,,,,,,,,,,,,476,476,,868',
',,868,,,868,868,,,868,,868,476,,476,868,476,476,476,476,,,476,868,476',
',,,868,868,868,868,868,868,,,,868,868,791,791,791,791,791,791,,868,',
'791,791,,,,791,,791,791,791,791,791,791,791,,,,,,791,791,791,791,791',
'791,791,,,791,,,,,,791,791,,791,791,791,791,791,791,791,791,791,,791',
'791,791,,791,791,,791,791,791,486,486,486,486,486,486,486,486,,486,486',
',,,,,486,486,,791,,,791,,,791,791,,,791,,791,486,,486,791,486,486,486',
'486,486,486,486,791,486,,,,791,791,791,791,791,791,,,,791,791,550,550',
'550,550,550,550,,791,,550,550,,,,550,,550,550,550,550,550,550,550,,',
',,,550,550,550,550,550,550,550,,,550,,,,,,550,550,,550,550,550,550,550',
'550,550,550,550,,550,550,550,,550,550,,550,550,550,472,,,,,,,,,,,,,',
',,472,472,,550,,,550,,,550,550,,,550,,550,472,,,550,472,472,472,472',
',,,550,,,,,550,550,550,550,550,550,,,,550,550,409,409,409,409,409,409',
',550,,409,409,,,,409,,409,409,409,409,409,409,409,,,,,,409,409,409,409',
'409,409,409,,,409,,,,,,409,409,409,409,409,409,409,409,409,409,409,409',
',409,409,409,,409,409,,409,409,409,470,,,,,,,,,,,,,,,,470,470,,409,',
',409,,,409,409,,,409,,409,470,,470,409,470,470,470,470,,,,409,,,,,409',
'409,409,409,409,409,,,,409,409,782,782,782,782,782,782,,409,,782,782',
',,,782,,782,782,782,782,782,782,782,,,,,,782,782,782,782,782,782,782',
',,782,,,,,,782,782,,782,782,782,782,782,782,782,782,782,,782,782,782',
',782,782,,782,782,782,471,,,,,,,,,,,,,,,,471,471,,782,,,782,,,782,782',
',,782,,782,471,,471,782,471,471,471,471,,,,782,,,,,782,782,782,782,782',
'782,,,,782,782,736,736,736,736,736,736,,782,,736,736,,,,736,,736,736',
'736,736,736,736,736,,,,,,736,736,736,736,736,736,736,,,736,,,,,,736',
'736,,736,736,736,736,736,736,736,736,736,,736,736,736,,736,736,,736',
'736,736,,,,,,,,,,,,,,,,,,,,736,,,736,,,736,736,,,736,,736,,,,736,,,',
',,,,736,,,,,736,736,736,736,736,736,,,,736,736,823,823,823,823,823,823',
',736,,823,823,,,,823,,823,823,823,823,823,823,823,,,,,,823,823,823,823',
'823,823,823,,,823,,,,,,823,823,,823,823,823,823,823,823,823,823,823',
',823,823,823,,823,823,,823,823,823,,,,,,,,,,,,,,,,,,,,823,,,823,,,823',
'823,,,823,,823,,,,823,,,,,,,,823,,,,,823,823,823,823,823,823,,,,823',
'823,864,864,864,864,864,864,,823,,864,864,,,,864,,864,864,864,864,864',
'864,864,,,,,,864,864,864,864,864,864,864,,,864,,,,,,864,864,,864,864',
'864,864,864,864,864,864,864,,864,864,864,,864,864,,864,864,864,,,,,',
',,,,,,,,,,,,,,864,,,864,,,864,864,,,864,,864,,,,864,,,,,,,,864,,,,,864',
'864,864,864,864,864,,,,864,864,781,781,781,781,781,781,,864,,781,781',
',,,781,,781,781,781,781,781,781,781,,,,,,781,781,781,781,781,781,781',
',,781,,,,,,781,781,,781,781,781,781,781,781,781,781,781,,781,781,781',
',781,781,,781,781,781,,,,,,,,,,,,,,,,,,,,781,,,781,,,781,781,,,781,',
'781,,,,781,,,,,,,,781,,,,,781,781,781,781,781,781,,,,781,781,735,735',
'735,735,735,735,,781,,735,735,,,,735,,735,735,735,735,735,735,735,,',
',,,735,735,735,735,735,735,735,,,735,,,,,,735,735,,735,735,735,735,735',
'735,735,735,735,,735,735,735,,735,735,,735,735,735,,,,,,,,,,,,,,,,,',
',,735,,,735,,,735,735,,,735,,735,,,,735,,,,,,,,735,,,,,735,735,735,735',
'735,735,,,,735,735,275,275,275,,275,,,735,275,275,,,,275,,275,275,275',
'275,275,275,275,,,,,,275,275,275,275,275,275,275,,,275,,,,,,,275,,,275',
'275,275,275,275,275,275,275,,275,275,275,,275,275,,275,275,275,,,,,',
',,,,,,,,,,,,,,275,,,275,,,275,275,,,275,,,,,,275,,,,,,,,275,,,,,275',
'275,275,275,275,275,,,,275,275,58,58,58,,58,,,275,58,58,,,,58,,58,58',
'58,58,58,58,58,,,,,,58,58,58,58,58,58,58,,,58,,,,,,,58,,,58,58,58,58',
'58,58,58,58,,58,58,58,,58,58,,58,58,58,,,,,,,,,,,,,,,,,,,,58,,,58,,',
'58,58,,,58,,,,,,58,,,,,,,,58,,,,,58,58,58,58,58,58,,,,58,58,59,59,59',
',59,,,58,59,59,,,,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59',
',,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59,59,59,59,,59,59,,59,59,59',
',,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59,,,,59,,,,,,,,59,,,,,59,59',
'59,59,59,59,,,,59,59,60,60,60,,60,,,59,60,60,,,,60,,60,60,60,60,60,60',
'60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60,60',
'60,60,60,60,,60,60,,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60',
',,,,,60,,,,,,,,60,,,,,60,60,60,60,60,60,,,,60,60,45,45,45,,45,,,60,45',
'45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,',
'45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,',
',,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45',
',,,45,45,668,668,668,,668,,,45,668,668,,,,668,,668,668,668,668,668,668',
'668,,,,,,668,668,668,668,668,668,668,,,668,,,,,,,668,,,668,668,668,668',
'668,668,668,668,,668,668,668,,668,668,,,,668,,,,,,,,,,,,,,,,,,,,668',
',,668,,,668,668,,,668,,,,,,,,,,,,,,,,,,,668,668,668,668,668,668,,,,668',
'668,63,63,63,,63,,,668,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63',
'63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63,63,,63',
'63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,',
'63,,,,,63,63,63,63,63,63,,,,63,63,64,64,64,,64,,,63,64,64,,,,64,,64',
'64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64',
'64,64,64,64,64,,64,64,64,,64,64,,64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64',
',,64,64,,,64,,,,,,64,,,,,,,,64,,,,,64,64,64,64,64,64,,,,64,64,67,67',
'67,,67,,,64,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67',
'67,,,67,,,,,644,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67',
'67,644,644,644,644,644,644,644,644,644,644,644,,644,644,,,644,644,,67',
',,67,,,67,67,,,67,,,644,,644,67,644,644,644,644,644,644,644,67,644,',
',,67,67,67,67,67,67,,,,67,67,67,644,68,68,68,67,68,67,,,68,68,,,,68',
',68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68',
'68,68,68,68,68,68,,68,68,68,,68,68,,,,68,,,,,,,,,,,,,,,,,,,,68,,,68',
',,68,68,,,68,,68,,,,,,,,,,,,,,,,,68,68,68,68,68,68,,,,68,68,951,951',
'951,,951,,,68,951,951,,,,951,,951,951,951,951,951,951,951,,,,,,951,951',
'951,951,951,951,951,,,951,,,,,,,951,,,951,951,951,951,951,951,951,951',
'951,951,951,951,,951,951,,951,951,951,,,,,,,,,,,,,,,,,,,,951,,,951,',
',951,951,,,951,,951,,951,,951,,,,,,,,951,,,,,951,951,951,951,951,951',
',,,951,951,419,419,419,,419,,,951,419,419,,,,419,,419,419,419,419,419',
'419,419,,,,,,419,419,419,419,419,419,419,,,419,,,,,,,419,,,419,419,419',
'419,419,419,419,419,,419,419,419,,419,419,,419,419,419,,,,,,,,,,,,,',
',,,,,,419,,,419,,,419,419,,,419,,,,,,419,,,,,,,,419,,,,,419,419,419',
'419,419,419,,,,419,419,663,663,663,,663,,,419,663,663,,,,663,,663,663',
'663,663,663,663,663,,,,,,663,663,663,663,663,663,663,,,663,,,,,,,663',
',,663,663,663,663,663,663,663,663,,663,663,663,,663,663,,663,663,663',
',,,,,,,,,,,,,,,,,,,663,,,663,,,663,663,,,663,,,,,,663,,,,,,,,663,,,',
',663,663,663,663,663,663,,,,663,663,519,519,519,,519,,,663,519,519,',
',,519,,519,519,519,519,519,519,519,,,,,,519,519,519,519,519,519,519',
',,519,,,,,,,519,,,519,519,519,519,519,519,519,519,,519,519,519,,519',
'519,,,,519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,,,,,,,,,,,',
',,,,,,519,519,519,519,519,519,,,,519,519,44,44,44,,44,,,519,44,44,,',
',44,,44,44,44,44,44,44,44,,,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,',
'44,44,44,44,44,44,44,44,,44,44,44,,44,44,,44,44,44,,,,,,,,,,,,,,,,,',
',,44,,,44,,,44,44,,,44,898,,898,898,898,44,898,,,,,,,44,,,,430,44,44',
'44,44,44,44,430,430,430,44,44,430,430,430,,430,,,44,,898,898,,,430,430',
'430,,,898,898,898,898,,,430,430,,430,430,430,430,430,,,,,,,,,,,,,,,',
',,,,,,,,430,430,430,430,430,430,430,430,430,430,430,430,430,430,,,430',
'430,430,,,430,,430,430,,,430,430,,430,,430,,430,,430,430,430,430,430',
'430,430,,430,430,430,,,,,,,,,,,,,430,430,,430,,430,729,729,729,,729',
',,,729,729,,,,729,,729,729,729,729,729,729,729,,,,,,729,729,729,729',
'729,729,729,,,729,,,,,,,729,,,729,729,729,729,729,729,729,729,729,729',
'729,729,,729,729,,729,729,729,,,,,,,,,,,,,,,,,,,,729,,,729,,,729,729',
',,729,,729,,729,,729,,,,,,,,729,,,,,729,729,729,729,729,729,,,,729,729',
'37,37,37,,37,,,729,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37',
'37,37,37,,,37,,,,,,447,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37',
',,,37,,447,447,447,447,447,447,447,447,447,447,447,,447,447,,,447,447',
'37,,,37,,,37,37,,,37,,,,447,,447,,447,447,447,447,447,447,447,,447,',
',37,37,37,37,37,37,,,,37,37,,,447,37,447,,,37,105,105,105,105,105,,',
',105,105,,,,105,,105,105,105,105,105,105,105,,,,,,105,105,105,105,105',
'105,105,,,105,,,,,,105,105,105,105,105,105,105,105,105,105,105,105,',
'105,105,105,,105,105,,105,105,105,,,,,,,,,,,,,,,,,,,,105,,,105,,,105',
'105,,,105,,105,,,,105,,,,,,,,105,,,,,105,105,105,105,105,105,,,,105',
'105,110,110,110,,110,105,,105,110,110,,,,110,,110,110,110,110,110,110',
'110,,,,,,110,110,110,110,110,110,110,,,110,,,,,,,110,,,110,110,110,110',
'110,110,110,110,,110,110,110,,110,110,,110,110,110,,,,,,,,,,,,,,,,,',
',,110,,,110,,,110,110,,,110,,,,,,110,,,,,,,,110,,,,,110,110,110,110',
'110,110,,,,110,110,111,111,111,,111,,,110,111,111,,,,111,,111,111,111',
'111,111,111,111,,,,,,111,111,111,111,111,111,111,,,111,,,,,,,111,,,111',
'111,111,111,111,111,111,111,,111,111,111,,111,111,,111,111,111,,,,,',
',,,,,,,,,,,,,,111,,,111,,,111,111,,,111,,,,,,111,,,,,,,,111,,,,,111',
'111,111,111,111,111,,,,111,111,112,112,112,,112,,,111,112,112,,,,112',
',112,112,112,112,112,112,112,,,,,,112,112,112,112,112,112,112,,,112',
',,,,,,112,,,112,112,112,112,112,112,112,112,,112,112,112,,112,112,,112',
'112,112,,,,,,,,,,,,,,,,,,,,112,,,112,,,112,112,,,112,,,,,,112,,,,,,',
',112,,,,,112,112,112,112,112,112,,,,112,112,113,113,113,,113,,,112,113',
'113,,,,113,,113,113,113,113,113,113,113,,,,,,113,113,113,113,113,113',
'113,,,113,,,,,,,113,,,113,113,113,113,113,113,113,113,,113,113,113,',
'113,113,,113,113,113,,,,,,,,,,,,,,,,,,,,113,,,113,,,113,113,,,113,,',
',,,113,,,,,,,,113,,,,,113,113,113,113,113,113,,,,113,113,114,114,114',
'114,114,,,113,114,114,,,,114,,114,114,114,114,114,114,114,,,,,,114,114',
'114,114,114,114,114,,,114,,,,,,114,114,,114,114,114,114,114,114,114',
'114,114,,114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,,,,114,,',
'114,,,114,114,,,114,,114,,,,114,,,,,,,,114,,,,,114,114,114,114,114,114',
',,,114,114,36,36,36,,36,,,114,36,36,,,,36,,36,36,36,36,36,36,36,,,,',
',36,36,36,36,36,36,36,,,36,,,,,,,36,,,36,36,36,36,36,36,36,36,,36,36',
'36,,36,36,,,,36,,,,,,,,,,,,,,,,,,,,36,,,36,,,36,36,,,36,,36,,,,,,,,',
',,,,,,,,36,36,36,36,36,36,,,,36,36,833,833,833,,833,,,36,833,833,,,',
'833,,833,833,833,833,833,833,833,,,,,,833,833,833,833,833,833,833,,',
'833,,,,,,,833,,,833,833,833,833,833,833,833,833,,833,833,833,,833,833',
',833,833,833,,,,,,,,,,,,,,,,,,,,833,,,833,,,833,833,,,833,,,,,,833,',
',,,,,,833,,,,,833,833,833,833,833,833,,,,833,833,33,33,33,,33,,,833',
'33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,',
',,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,',
',,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33',
'33,33,33,,,,33,33,32,32,32,,32,,,33,32,32,,,,32,,32,32,32,32,32,32,32',
',,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32',
'32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32',
',32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,200,200,200,,200,,',
'32,200,200,,,,200,,200,200,200,200,200,200,200,,,,,,200,200,200,200',
'200,200,200,,,200,,,,,,,200,,,200,200,200,200,200,200,200,200,,200,200',
'200,,200,200,,200,200,200,,,,,,,,,,,,,,,,,,,,200,,,200,,,200,200,,,200',
',200,,,,200,,,,,,,,200,,,,,200,200,200,200,200,200,,,,200,200,201,201',
'201,,201,,,200,201,201,,,,201,,201,201,201,201,201,201,201,,,,,,201',
'201,201,201,201,201,201,,,201,,,,,,,201,,,201,201,201,201,201,201,201',
'201,,201,201,201,,201,201,,201,201,201,,,,,,,,,,,,,,,,,,,,201,,,201',
',,201,201,,,201,,,,,,201,,,,,,,,201,,,,,201,201,201,201,201,201,,,,201',
'201,202,202,202,,202,,,201,202,202,,,,202,,202,202,202,202,202,202,202',
',,,,,202,202,202,202,202,202,202,,,202,,,,,,,202,,,202,202,202,202,202',
'202,202,202,202,202,202,202,,202,202,,202,202,202,,,,,,,,,,,,,,,,,,',
',202,,,202,,,202,202,,,202,,202,,202,,202,,,,,,,,202,,,,,202,202,202',
'202,202,202,,,,202,202,521,521,521,,521,,,202,521,521,,,,521,,521,521',
'521,521,521,521,521,,,,,,521,521,521,521,521,521,521,,,521,,,,,,,521',
',,521,521,521,521,521,521,521,521,521,521,521,521,,521,521,,521,521',
'521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,,521,,521,,521,,,,',
',,,521,,,,,521,521,521,521,521,521,,,,521,521,770,770,770,,770,,,521',
'770,770,,,,770,,770,770,770,770,770,770,770,,,,,,770,770,770,770,770',
'770,770,,,770,,,,,,,770,,,770,770,770,770,770,770,770,770,,770,770,770',
',770,770,,770,770,770,,,,,,,,,,,,,,,,,,,,770,,,770,,,770,770,,,770,',
',,,,770,,,,,,,,770,,,,,770,770,770,770,770,770,,,,770,770,205,205,205',
',205,,,770,205,205,,,,205,,205,205,205,205,205,205,205,,,,,,205,205',
'205,205,205,205,205,,,205,,,,,,,205,,,205,205,205,205,205,205,205,205',
',205,205,205,,205,205,,205,205,205,,,,,,,,,,,,,,,,,,,,205,,,205,,,205',
'205,,,205,,,,,,205,,,,,,,,205,,,,,205,205,205,205,205,205,,,,205,205',
'206,206,206,,206,,,205,206,206,,,,206,,206,206,206,206,206,206,206,',
',,,,206,206,206,206,206,206,206,,,206,,,,,,,206,,,206,206,206,206,206',
'206,206,206,,206,206,206,,206,206,,206,206,206,,,,,,,,,,,,,,,,,,,,206',
',,206,,,206,206,,,206,,206,,,,206,,,,,,,,206,,,,,206,206,206,206,206',
'206,,,,206,206,207,207,207,,207,,,206,207,207,,,,207,,207,207,207,207',
'207,207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,,,207,,,207,207',
'207,207,207,207,207,207,,207,207,207,,207,207,,207,207,207,,,,,,,,,',
',,,,,,,,,,207,,,207,,,207,207,,,207,,,,,,207,,,,,,,,207,,,,,207,207',
'207,207,207,207,,,,207,207,208,208,208,,208,,,207,208,208,,,,208,,208',
'208,208,208,208,208,208,,,,,,208,208,208,208,208,208,208,,,208,,,,,',
',208,,,208,208,208,208,208,208,208,208,,208,208,208,,208,208,,208,208',
'208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,,,,,208,,,,,,,,208',
',,,,208,208,208,208,208,208,,,,208,208,209,209,209,,209,,,208,209,209',
',,,209,,209,209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209',
',,209,,,,,,,209,,,209,209,209,209,209,209,209,209,,209,209,209,,209',
'209,,209,209,209,,,,,,,,,,,,,,,,,,,,209,,,209,,,209,209,,,209,,,,,,209',
',,,,,,,209,,,,,209,209,209,209,209,209,,,,209,209,210,210,210,,210,',
',209,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210',
'210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210',
'210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210',
',,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,210,31,31',
'31,,31,,210,,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31',
'31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,,31,31',
'31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,,,,,,31,,,',
'30,31,31,31,31,31,31,30,30,30,31,31,30,30,30,,30,,,31,,,,,,,30,30,,',
',,,,,,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,,,,,30,30,30,30,30,30',
'30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,,30,,30,',
'30,30,30,30,30,30,30,,30,,30,,,,,,,,,,,,,30,30,,30,29,30,636,636,636',
',636,29,29,29,636,636,29,29,29,636,29,636,636,636,636,636,636,636,,29',
'29,29,,636,636,636,636,636,636,636,29,29,636,29,29,29,29,29,,636,,,636',
'636,636,636,636,636,636,636,,636,636,636,,636,636,,636,636,636,29,29',
'29,29,29,29,29,29,29,29,29,29,29,29,,,29,29,29,636,,29,636,29,29,636',
'636,29,29,636,29,,29,,29,636,29,29,29,29,29,29,29,636,29,29,29,,636',
'636,636,636,636,636,,,,636,636,29,29,,29,,29,,636,635,635,635,,635,',
',,635,635,,,,635,,635,635,635,635,635,635,635,,,,,,635,635,635,635,635',
'635,635,,,635,,,,,,,635,,,635,635,635,635,635,635,635,635,,635,635,635',
',635,635,,635,635,635,,,,,,,,,,,,,,,,,,,,635,,,635,,,635,635,,,635,',
',,,,635,,,,,,,,635,,,,,635,635,635,635,635,635,,,,635,635,679,679,679',
',679,,,635,679,679,,,,679,,679,679,679,679,679,679,679,,,,,,679,679',
'679,679,679,679,679,,,679,,,,,,,679,,,679,679,679,679,679,679,679,679',
',679,679,679,,679,679,,,,679,,,,,,,,,,,,,,,,,,,,679,,,679,,,679,679',
',,679,,,,,,,,,,,,,,,,,,,679,679,679,679,679,679,,,,679,679,23,23,23',
',23,,,679,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23',
',,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,',
',,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23',
'23,23,23,,,,23,23,221,221,221,,221,,,23,221,221,,,,221,,221,221,221',
'221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221',
'221,221,221,221,221,221,221,,221,221,221,,221,221,,221,221,221,,,,,',
',,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,,,221',
'221,221,221,221,221,,,,221,221,820,820,820,,820,,,221,820,820,,,,820',
',820,820,820,820,820,820,820,,,,,,820,820,820,820,820,820,820,,,820',
',,,,,,820,,,820,820,820,820,820,820,820,820,,820,820,820,,820,820,,820',
'820,820,,,,,,,,,,,,,,,,,,,,820,,,820,,,820,820,,,820,,,,,,820,,,,,,',
',820,,,,,820,820,820,820,820,820,,,,820,820,528,528,528,,528,,,820,528',
'528,,,,528,,528,528,528,528,528,528,528,,,,,,528,528,528,528,528,528',
'528,,,528,,,,,,,528,,,528,528,528,528,528,528,528,528,,528,528,528,',
'528,528,,,,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,,,,,,,,',
',,,,,,,,,,528,528,528,528,528,528,,,,528,528,224,224,224,,224,,,528',
'224,224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224,224',
'224,224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224,224',
',224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,',
',,,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224,225,225,225',
',225,,,224,225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225',
'225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,225',
',225,225,225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225',
'225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225',
'723,723,723,,723,,,225,723,723,,,,723,,723,723,723,723,723,723,723,',
',,,,723,723,723,723,723,723,723,,,723,,,,,,,723,,,723,723,723,723,723',
'723,723,723,,723,723,723,,723,723,,723,723,723,,,,,,,,,,,,,,,,,,,,723',
',,723,,,723,723,,,723,,,,,,723,,,,,,,,723,,,,,723,723,723,723,723,723',
',,,723,723,227,227,227,,227,,,723,227,227,,,,227,,227,227,227,227,227',
'227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227,227',
'227,227,227,227,227,,227,227,227,,227,227,,227,227,227,,,,,,,,,,,,,',
',,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,,,227,227,227',
'227,227,227,,,,227,227,228,228,228,,228,,,227,228,228,,,,228,,228,228',
'228,228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,,228',
',,228,228,228,228,228,228,228,228,,228,228,228,,228,228,,228,228,228',
',,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228,,,,,,,,228,,,',
',228,228,228,228,228,228,,,,228,228,229,229,229,,229,,,228,229,229,',
',,229,,229,229,229,229,229,229,229,,,,,,229,229,229,229,229,229,229',
',,229,,,,,,,229,,,229,229,229,229,229,229,229,229,,229,229,229,,229',
'229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,,,,,229',
',,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229,230,230,230,,230,',
',229,230,230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230,230,230',
'230,230,230,,,230,,,,,,,230,,,230,230,230,230,230,230,230,230,,230,230',
'230,,230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230',
',,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230,231,231,231',
',231,,,230,231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231',
'231,231,231,231,231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231',
',231,231,231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231',
'231,,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231',
'232,232,232,,232,,,231,232,232,,,,232,,232,232,232,232,232,232,232,',
',,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232',
'232,232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232',
',,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232',
',,,232,232,233,233,233,,233,,,232,233,233,,,,233,,233,233,233,233,233',
'233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233',
'233,233,233,233,233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,',
',,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233',
'233,233,233,,,,233,233,234,234,234,,234,,,233,234,234,,,,234,,234,234',
'234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234',
',,234,234,234,234,234,234,234,234,,234,234,234,,234,234,,234,234,234',
',,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,',
',234,234,234,234,234,234,,,,234,234,235,235,235,,235,,,234,235,235,',
',,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235',
',,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,,235',
'235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235',
',,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,236,236,236,,236,',
',235,236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236',
'236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236,236',
'236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236',
',,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236,,,,236,236,237,237,237',
',237,,,236,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237',
'237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237',
',237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237',
'237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237',
'238,238,238,,238,,,237,238,238,,,,238,,238,238,238,238,238,238,238,',
',,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238',
'238,238,238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238',
',,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,238,238',
',,,238,238,239,239,239,,239,,,238,239,239,,,,239,,239,239,239,239,239',
'239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239',
'239,239,239,239,239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,',
',,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239',
'239,239,239,,,,239,239,240,240,240,,240,,,239,240,240,,,,240,,240,240',
'240,240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240',
',,240,240,240,240,240,240,240,240,,240,240,240,,240,240,,240,240,240',
',,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,',
',240,240,240,240,240,240,,,,240,240,241,241,241,,241,,,240,241,241,',
',,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241',
',,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241,,241',
'241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241',
',,,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,242,242,242,,242,',
',241,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242',
'242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242,242',
'242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242',
',,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,243,243,243',
',243,,,242,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243',
'243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243',
',243,243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243',
'243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243',
'244,244,244,,244,,,243,244,244,,,,244,,244,244,244,244,244,244,244,',
',,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244',
',,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244',
',,,244,244,245,245,245,,245,,,244,245,245,,,,245,,245,245,245,245,245',
'245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245',
'245,245,245,245,245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,',
',,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245',
'245,245,245,,,,245,245,246,246,246,,246,,,245,246,246,,,,246,,246,246',
'246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246',
',,246,246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246,246',
',,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,',
',246,246,246,246,246,246,,,,246,246,247,247,247,,247,,,246,247,247,',
',,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247',
',,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,,247',
'247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247',
',,,,,,,247,,,,,247,247,247,247,247,247,,,,247,247,248,248,248,,248,',
',247,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248,248',
'248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248',
'248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248',
',,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,249,249,249',
',249,,,248,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249',
'249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249',
',249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249',
'249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249',
'531,531,531,,531,,,249,531,531,,,,531,,531,531,531,531,531,531,531,',
',,,,531,531,531,531,531,531,531,,,531,,,,,,,531,,,531,531,531,531,531',
'531,531,531,,531,531,531,,531,531,,531,531,531,,,,,,,,,,,,,,,,,,,,531',
',,531,,,531,531,,,531,,,,,,531,,,,,,,,531,,,,,531,531,531,531,531,531',
',,,531,531,532,532,532,,532,,,531,532,532,,,,532,,532,532,532,532,532',
'532,532,,,,,,532,532,532,532,532,532,532,,,532,,,,,,,532,,,532,532,532',
'532,532,532,532,532,,532,532,532,,532,532,,532,532,532,,,,,,,,,,,,,',
',,,,,,532,,,532,,,532,532,,,532,,,,,,532,,,,,,,,532,,,,,532,532,532',
'532,532,532,,,,532,532,512,512,512,512,512,,,532,512,512,,,,512,,512',
'512,512,512,512,512,512,,,,,,512,512,512,512,512,512,512,,,512,,,,,',
'512,512,,512,512,512,512,512,512,512,512,512,,512,512,512,,512,512,',
'512,512,512,,,,,,,,,,,,,,,,,,,,512,,,512,,,512,512,,,512,,512,,,,512',
',,,,,,,512,,,,,512,512,512,512,512,512,,,,512,512,255,255,255,,255,512',
',512,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255',
'255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,255,255',
'255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255',
',,255,,255,,255,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255,255',
'632,632,632,,632,,,255,632,632,,,,632,,632,632,632,632,632,632,632,',
',,,,632,632,632,632,632,632,632,,,632,,,,,,,632,,,632,632,632,632,632',
'632,632,632,,632,632,632,,632,632,,632,632,632,,,,,,,,,,,,,,,,,,,,632',
',,632,,,632,632,,,632,,,,,,632,,,,,,,,632,,,,,632,632,632,632,632,632',
',,,632,632,261,261,261,,261,,,632,261,261,,,,261,,261,261,261,261,261',
'261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261',
'261,261,261,261,261,261,261,261,261,,261,261,,261,261,261,,,,,,,,,,',
',,,,,,,,,261,,,261,,,261,261,,,261,,261,,261,,261,,,,,,,,261,,,,,261',
'261,261,261,261,261,,,,261,261,264,264,264,,264,,,261,264,264,,,,264',
',264,264,264,264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264',
',,,,,,264,,,264,264,264,264,264,264,264,264,264,264,264,264,,264,264',
',264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,264,,264',
',264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,264,631,631,631',
',631,,264,,631,631,,,,631,,631,631,631,631,631,631,631,,,,,,631,631',
'631,631,631,631,631,,,631,,,,,,,631,,,631,631,631,631,631,631,631,631',
',631,631,631,,631,631,,631,631,631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631',
'631,,,631,,,,,,631,,,,,,,,631,,,,,631,631,631,631,631,631,,,,631,631',
'626,626,626,,626,,,631,626,626,,,,626,,626,626,626,626,626,626,626,',
',,,,626,626,626,626,626,626,626,,,626,,,,,,,626,,,626,626,626,626,626',
'626,626,626,,626,626,626,,626,626,,626,626,626,,,,,,,,,,,,,,,,,,,,626',
',,626,,,626,626,,,626,,,,,,626,,,,,,,,626,,,,,626,626,626,626,626,626',
',,,626,626,625,625,625,,625,,,626,625,625,,,,625,,625,625,625,625,625',
'625,625,,,,,,625,625,625,625,625,625,625,,,625,,,,,,,625,,,625,625,625',
'625,625,625,625,625,,625,625,625,,625,625,,625,625,625,,,,,,,,,,,,,',
',,,,,,625,,,625,,,625,625,,,625,,,,,,625,,,,,,,,625,,,,,625,625,625',
'625,625,625,,,,625,625,271,271,271,,271,,,625,271,271,,,,271,,271,271',
'271,271,271,271,271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271',
',,271,271,271,271,271,271,271,271,,271,271,271,,271,271,,271,271,271',
',,,,,,,,,,,,,,,,,,,271,,,271,,,271,271,,,271,,,,,,271,,,,,,,,271,,,',
',271,271,271,271,271,271,,,,271,271,624,624,624,,624,,,271,624,624,',
',,624,,624,624,624,624,624,624,624,,,,,,624,624,624,624,624,624,624',
',,624,,,,,,,624,,,624,624,624,624,624,624,624,624,624,624,624,624,,624',
'624,,624,624,624,,,,,,,,,,,,,,,,,,,,624,,,624,,,624,624,,,624,,,,624',
',624,,,,,,,,624,,,,,624,624,624,624,624,624,,,,624,624,273,273,273,',
'273,,,624,273,273,,,,273,,273,273,273,273,273,273,273,,,,,,273,273,273',
'273,273,273,273,,,273,,,,,,,273,,,273,273,273,273,273,273,273,273,,273',
'273,273,,273,273,,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273',
',,273,,,,,,273,,,,,,,,273,,,,,273,273,273,273,273,273,,,,273,273,46',
'46,46,,46,,,273,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46',
'46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46',
'46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46',
'46,46,46,46,46,,,,46,46,623,623,623,,623,,,46,623,623,,,,623,,623,623',
'623,623,623,623,623,,,,,,623,623,623,623,623,623,623,,,623,,,,,,,623',
',,623,623,623,623,623,623,623,623,623,623,623,623,,623,623,,623,623',
'623,,,,,,,,,,,,,,,,,,,,623,,,623,,,623,623,,,623,,623,,623,,623,,,,',
',,,623,,,,,623,623,623,623,623,623,,,,623,623,685,685,685,,685,,,623',
'685,685,,,,685,,685,685,685,685,685,685,685,,,,,,685,685,685,685,685',
'685,685,,,685,,,,,,,685,,,685,685,685,685,685,685,685,685,,685,685,685',
',685,685,,685,685,685,,,,,,,,,,,,,,,,,,,,685,,,685,,,685,685,,,685,',
'685,,,,685,,,,,,,,685,,,,,685,685,685,685,685,685,,,,685,685,281,281',
'281,281,281,,,685,281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281',
'281,281,281,281,281,281,,,281,,,,,,281,281,,281,281,281,281,281,281',
'281,281,281,,281,281,281,,281,281,,281,281,281,,,,,,,,,,,,,,,,,,,,281',
',,281,,,281,281,,,281,,281,,,,281,,,,,,,,281,,,,,281,281,281,281,281',
'281,,,,281,281,620,620,620,,620,,,281,620,620,,,,620,,620,620,620,620',
'620,620,620,,,,,,620,620,620,620,620,620,620,,,620,,,,,,,620,,,620,620',
'620,620,620,620,620,620,,620,620,620,,620,620,,620,620,620,,,,,,,,,',
',,,,,,,,,,620,,,620,,,620,620,,,620,,,,,,620,,,,,,,,620,,,,,620,620',
'620,620,620,620,,,,620,620,457,457,457,,457,,,620,457,457,,,,457,,457',
'457,457,457,457,457,457,,,,,,457,457,457,457,457,457,457,,,457,,,,,',
',457,,,457,457,457,457,457,457,457,457,457,457,457,457,,457,457,,457',
'457,457,,,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,457,,457,,457',
',,,,,,,457,,,,,457,457,457,457,457,457,,,,457,457,619,619,619,,619,',
',457,619,619,,,,619,,619,619,619,619,619,619,619,,,,,,619,619,619,619',
'619,619,619,,,619,,,,,,,619,,,619,619,619,619,619,619,619,619,,619,619',
'619,,619,619,,619,619,619,,,,,,,,,,,,,,,,,,,,619,,,619,,,619,619,,,619',
',619,,,,619,,,,,,,,619,,,,,619,619,619,619,619,619,,,,619,619,508,508',
'508,,508,,,619,508,508,,,,508,,508,508,508,508,508,508,508,,,,,,508',
'508,508,508,508,508,508,,,508,,,,,,,508,,,508,508,508,508,508,508,508',
'508,,508,508,508,,508,508,,508,508,508,,,,,,,,,,,,,,,,,,,,508,,,508',
',,508,508,,,508,,,,,,508,,,,,,,,508,,,,,508,508,508,508,508,508,,,,508',
'508,749,749,749,,749,,,508,749,749,,,,749,,749,749,749,749,749,749,749',
',,,,,749,749,749,749,749,749,749,,,749,,,,,,,749,,,749,749,749,749,749',
'749,749,749,,749,749,749,,749,749,,749,749,749,,,,,,,,,,,,,,,,,,,,749',
',,749,,,749,749,,,749,,,,,,749,,,,,,,,749,,,,,749,749,749,749,749,749',
',,,749,749,287,287,287,,287,,,749,287,287,,,,287,,287,287,287,287,287',
'287,287,,,,,,287,287,287,287,287,287,287,,,287,,,,,,,287,,,287,287,287',
'287,287,287,287,287,,287,287,287,,287,287,,,,287,,,,,,,,,,,,,,,,,,,',
'287,,,287,,,287,287,,,287,,,,,,,,,,,,,,,,,,,287,287,287,287,287,287',
',,,287,287,459,459,459,287,459,,,287,459,459,,,,459,,459,459,459,459',
'459,459,459,,,,,,459,459,459,459,459,459,459,,,459,,,,,,,459,,,459,459',
'459,459,459,459,459,459,,459,459,459,,459,459,,459,459,459,,,,,,,,,',
',,,,,,,,,,459,,,459,,,459,459,,,459,,,,,,459,,,,,,,,459,,,,,459,459',
'459,459,459,459,,,,459,459,533,533,533,,533,,,459,533,533,,,,533,,533',
'533,533,533,533,533,533,,,,,,533,533,533,533,533,533,533,,,533,,,,,',
',533,,,533,533,533,533,533,533,533,533,,533,533,533,,533,533,,533,533',
'533,,,,,,,,,,,,,,,,,,,,533,,,533,,,533,533,,,533,,,,,,533,,,,,,,,533',
',,,,533,533,533,533,533,533,,,,533,533,751,751,751,,751,,,533,751,751',
',,,751,,751,751,751,751,751,751,751,,,,,,751,751,751,751,751,751,751',
',,751,,,,,,,751,,,751,751,751,751,751,751,751,751,,751,751,751,,751',
'751,,751,751,751,,,,,,,,,,,,,,,,,,,,751,,,751,,,751,751,,,751,592,,592',
'592,592,751,592,,,,,,,751,,,,489,751,751,751,751,751,751,489,489,489',
'751,751,489,489,489,,489,,,751,,592,592,,,,489,,,,592,592,592,592,,',
'489,489,,489,489,489,489,489,,,,,,456,456,,,456,,,,,,,,,456,456,,456',
'456,456,456,456,456,456,,,456,456,,,489,456,456,456,456,,,489,,,456',
',489,489,,,,,456,456,,456,456,456,456,456,456,456,456,456,456,456,,',
'456,489,,,,,,596,596,596,,596,,,489,596,596,,,489,596,,596,596,596,596',
'596,596,596,,,,,,596,596,596,596,596,596,596,,,596,,,,,,,596,,,596,596',
'596,596,596,596,596,596,,596,596,596,,596,596,,596,596,596,,,,,,,,,',
',,,,,,,,,,596,,,596,,,596,596,,,596,,,,,,596,,,,,,,,596,,,,,596,596',
'596,596,596,596,,,,596,596,590,590,590,,590,,,596,590,590,,,,590,,590',
'590,590,590,590,590,590,,,,,,590,590,590,590,590,590,590,,,590,,,,,',
',590,,,590,590,590,590,590,590,590,590,,590,590,590,,590,590,,590,590',
'590,,,,,,,,,,,,,,,,,,,,590,,,590,,,590,590,,,590,,,,,,590,,,,,,,,590',
',,,,590,590,590,590,590,590,,,,590,590,367,367,367,,367,,,590,367,367',
',,,367,,367,367,367,367,367,367,367,,,,,,367,367,367,367,367,367,367',
',,367,,,,,,,367,,,367,367,367,367,367,367,367,367,,367,367,367,,367',
'367,,,,367,,,,,,,,,,,,,,,,,,,,367,,,367,,,367,367,,,367,,,,,,,,,,,,',
',,,,,,367,367,367,367,367,367,,,,367,367,460,460,460,,460,,,367,460',
'460,,,,460,,460,460,460,460,460,460,460,,,,,,460,460,460,460,460,460',
'460,,,460,,,,,,,460,,,460,460,460,460,460,460,460,460,,460,460,460,',
'460,460,,460,460,460,,,,,,,,,,,,,,,,,,,,460,,,460,,,460,460,,,460,,',
',,,460,,,,,,,,460,,,,,460,460,460,460,460,460,,,,460,460,365,365,365',
',365,,,460,365,365,,,,365,,365,365,365,365,365,365,365,,,,,,365,365',
'365,365,365,365,365,,,365,,,,,,,365,,,365,365,365,365,365,365,365,365',
',365,365,365,,365,365,,,,365,,,,,,,,,,,,,,,,,,,,365,,,365,,,365,365',
',,365,,,,,,,,,,,,,,,,,,,365,365,365,365,365,365,,,,365,365,888,888,888',
',888,,,365,888,888,,,,888,,888,888,888,888,888,888,888,,,,,,888,888',
'888,888,888,888,888,,,888,,,,,,,888,,,888,888,888,888,888,888,888,888',
',888,888,888,,888,888,,888,888,888,,,,,,,,,,,,,,,,,,,,888,,,888,,,888',
'888,,,888,,888,,,,888,,,,,,,,888,,,,,888,888,888,888,888,888,,,,888',
'888,537,537,537,,537,,,888,537,537,,,,537,,537,537,537,537,537,537,537',
',,,,,537,537,537,537,537,537,537,,,537,,,,,,,537,,,537,537,537,537,537',
'537,537,537,,537,537,537,,537,537,,537,537,537,,,,,,,,,,,,,,,,,,,,537',
',,537,,,537,537,,,537,,,,,,537,,,,,,,,537,,,,,537,537,537,537,537,537',
',,,537,537,768,768,768,,768,,,537,768,768,,,,768,,768,768,768,768,768',
'768,768,,,,,,768,768,768,768,768,768,768,,,768,,,,,,,768,,,768,768,768',
'768,768,768,768,768,,768,768,768,,768,768,,768,768,768,,,,,,,,,,,,,',
',,,,,,768,,,768,,,768,768,,,768,,,,,,768,,,,,,,,768,,,,,768,768,768',
'768,768,768,,,,768,768,304,304,304,,304,,,768,304,304,,,,304,,304,304',
'304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304,,,,,,,304',
',,304,304,304,304,304,304,304,304,,304,304,304,,304,304,,,,304,,,,,',
',,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,,,,,,,,,,,,,,,,,304,304,304',
'304,304,304,,,,304,304,767,767,767,,767,,,304,767,767,,,,767,,767,767',
'767,767,767,767,767,,,,,,767,767,767,767,767,767,767,,,767,,,,,,,767',
',,767,767,767,767,767,767,767,767,,767,767,767,,767,767,,767,767,767',
',,,,,,,,,,,,,,,,,,,767,,,767,,,767,767,,,767,,,,,,767,,,,,,,,767,,,',
',767,767,767,767,767,767,,,,767,767,851,851,851,,851,,,767,851,851,',
',,851,,851,851,851,851,851,851,851,,,,,,851,851,851,851,851,851,851',
',,851,,,,,,,851,,,851,851,851,851,851,851,851,851,851,851,851,851,,851',
'851,,851,851,851,,,,,,,,,,,,,,,,,,,,851,,,851,,,851,851,,,851,,,,851',
',851,,,,,,,,851,,,,,851,851,851,851,851,851,,,,851,851,852,852,852,',
'852,,,851,852,852,,,,852,,852,852,852,852,852,852,852,,,,,,852,852,852',
'852,852,852,852,,,852,,,,,,,852,,,852,852,852,852,852,852,852,852,,852',
'852,852,,852,852,,852,852,852,,,,,,,,,,,,,,,,,,,,852,,,852,,,852,852',
',,852,,,,,,852,,,,,,,,852,,,,,852,852,852,852,852,852,,,,852,852,766',
'766,766,,766,,,852,766,766,,,,766,,766,766,766,766,766,766,766,,,,,',
'766,766,766,766,766,766,766,,,766,,,,,,,766,,,766,766,766,766,766,766',
'766,766,,766,766,766,,766,766,,766,766,766,,,,,,,,,,,,,,,,,,,,766,,',
'766,,,766,766,,,766,,,,,,766,,,,,,,,766,,,,,766,766,766,766,766,766',
',,,766,766,578,578,578,,578,,,766,578,578,,,,578,,578,578,578,578,578',
'578,578,,,,,,578,578,578,578,578,578,578,,,578,,,,,,,578,,,578,578,578',
'578,578,578,578,578,578,578,578,578,,578,578,,578,578,578,,,,,,,,,,',
',,,,,,,,,578,,,578,,,578,578,,,578,,578,,578,,578,,,,,,,,578,,,,,578',
'578,578,578,578,578,,,,578,578,313,313,313,,313,,,578,313,313,,,,313',
',313,313,313,313,313,313,313,,,,,,313,313,313,313,313,313,313,,,313',
',,,,,,313,,,313,313,313,313,313,313,313,313,,313,313,313,,313,313,,313',
'313,313,,,,,,,,,,,,,,,,,,,,313,,,313,313,,313,313,,,313,,,,,,313,,,',
',,,,313,,,,,313,313,313,313,313,313,,,,313,313,461,461,461,,461,,,313',
'461,461,,,,461,,461,461,461,461,461,461,461,,,,,,461,461,461,461,461',
'461,461,,,461,,,,,,,461,,,461,461,461,461,461,461,461,461,,461,461,461',
',461,461,,461,461,461,,,,,,,,,,,,,,,,,,,,461,,,461,,,461,461,,,461,',
',,,,461,,,,,,,,461,,,,,461,461,461,461,461,461,,,,461,461,353,353,353',
',353,,,461,353,353,,,,353,,353,353,353,353,353,353,353,,,,,,353,353',
'353,353,353,353,353,,,353,,,,,,,353,,,353,353,353,353,353,353,353,353',
',353,353,353,,353,353,,353,353,353,,,,,,,,,,,,,,,,,,,,353,,,353,,,353',
'353,,,353,,,,,,353,,,,,,,,353,,,,,353,353,353,353,353,353,,,,353,353',
'352,352,352,,352,,,353,352,352,,,,352,,352,352,352,352,352,352,352,',
',,,,352,352,352,352,352,352,352,,,352,,,,,,,352,,,352,352,352,352,352',
'352,352,352,,352,352,352,,352,352,,352,352,352,,,,,,,,,,,,,,,,,,,,352',
',,352,,,352,352,,,352,,,,,,352,,,,,,,,352,,,,,352,352,352,352,352,352',
',,,352,352,506,506,506,,506,,,352,506,506,,,,506,,506,506,506,506,506',
'506,506,,,,,,506,506,506,506,506,506,506,,,506,,,,,,,506,,,506,506,506',
'506,506,506,506,506,506,506,506,506,,506,506,,506,506,506,,,,,,,,,,',
',,,,,,,,,506,,,506,,,506,506,,,506,,,,506,,506,,,,,,,,506,,,,,506,506',
'506,506,506,506,,,,506,506,872,872,872,,872,,,506,872,872,,,,872,,872',
'872,872,872,872,872,872,,,,,,872,872,872,872,872,872,872,,,872,,,,,',
',872,,,872,872,872,872,872,872,872,872,,872,872,872,,872,872,,,,872',
',,,,,,,,,,,,,,,,,,,872,,,872,,,872,872,,,872,,,,,,,,,,,,,,,,,,,872,872',
'872,872,872,872,,,,872,872,542,542,542,,542,,,872,542,542,,,,542,,542',
'542,542,542,542,542,542,,,,,,542,542,542,542,542,542,542,,,542,,,,,',
',542,,,542,542,542,542,542,542,542,542,542,542,542,542,,542,542,,542',
'542,542,,,,,,,,,,,,,,,,,,,,542,,,542,,,542,542,,,542,,542,,,,542,,,',
',,,,542,,,,,542,542,542,542,542,542,,,,542,542,503,503,503,,503,,,542',
'503,503,,,,503,,503,503,503,503,503,503,503,,,,,,503,503,503,503,503',
'503,503,,,503,,,,,,,503,,,503,503,503,503,503,503,503,503,503,503,503',
'503,,503,503,,503,503,503,,,,,,,,,,,,,,,,,,,,503,,,503,,,503,503,,,503',
',503,,503,,503,,,,,,,,503,,,,,503,503,503,503,503,503,,,,503,503,8,8',
'8,8,8,,,503,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8',
'8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8',
'8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,545,545,545,,545,,,8,545',
'545,,,,545,,545,545,545,545,545,545,545,,,,,,545,545,545,545,545,545',
'545,,,545,,,,,,,545,,,545,545,545,545,545,545,545,545,545,545,545,545',
',545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,,545,',
',,,,545,,,,,,,,545,,,,,545,545,545,545,545,545,,,,545,545,717,717,717',
',717,,,545,717,717,,,,717,,717,717,717,717,717,717,717,,,,,,717,717',
'717,717,717,717,717,,,717,,,,,,,717,,,717,717,717,717,717,717,717,717',
',717,717,717,,717,717,,717,717,717,,,,,,,,,,,,,,,,,,,,717,,,717,,,717',
'717,,,717,62,717,62,62,62,717,62,,,,,,,717,,,,492,717,717,717,717,717',
'717,492,492,492,717,717,492,492,492,,492,,,717,,62,62,,,,492,,,,62,62',
'62,62,,,492,492,,492,492,492,492,492,,,,,,947,947,,,947,,,,,,,,,947',
'947,,947,947,947,947,947,947,947,,,947,947,,,492,947,947,947,947,,,492',
',,947,,492,492,,,,,947,947,,947,947,947,947,947,947,947,947,947,947',
'947,,,947,492,,,,,,862,862,862,,862,,,492,862,862,,,492,862,,862,862',
'862,862,862,862,862,,,,,,862,862,862,862,862,862,862,,,862,,,,,,,862',
',,862,862,862,862,862,862,862,862,,862,862,862,,862,862,,,,862,,,,,',
',,,,,,,,,,,,,,862,,,862,,,862,862,,,862,,,,,,,,,,,,,,,,,,,862,862,862',
'862,862,862,,,,862,862,559,559,559,,559,,,862,559,559,,,,559,,559,559',
'559,559,559,559,559,,,,,,559,559,559,559,559,559,559,,,559,,,,,,,559',
',,559,559,559,559,559,559,559,559,,559,559,559,,559,559,,559,559,559',
',,,,,,,,,,,,,,,,,,,559,,,559,,,559,559,,,559,,,,,,559,,,,,,,,559,,,',
',559,559,559,559,559,559,,,,559,559,765,765,765,,765,,,559,765,765,',
',,765,,765,765,765,765,765,765,765,,,,,,765,765,765,765,765,765,765',
',,765,,,,,,,765,,,765,765,765,765,765,765,765,765,,765,765,765,,765',
'765,,765,765,765,,,,,,,,,,,,,,,,,,,,765,,,765,,,765,765,,,765,,,,,,765',
',,,,,,,765,,,,,765,765,765,765,765,765,,,,765,765,226,226,226,,226,',
',765,226,226,,,,226,,226,226,226,226,226,226,226,,,,,,226,226,226,226',
'226,226,226,,,226,,,,,422,,226,,,226,226,226,226,226,226,226,226,,226',
'226,226,,226,226,,226,226,226,422,422,422,422,422,422,422,422,422,422',
'422,,422,422,,,422,422,,226,,,226,,,226,226,,,226,,,422,,422,226,422',
'422,422,422,422,422,422,226,422,,,,226,226,226,226,226,226,,,,226,226',
',422,,,,,,226,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11',
'11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,',
',11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,,',
'11,11,,,,,,,,,,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12',
'12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,',
',,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,',
',12,12,,,,,,,,,,12,616,616,616,616,616,616,616,616,616,616,616,616,616',
'616,616,616,616,616,616,616,616,616,616,616,,,,616,616,616,616,616,616',
'616,616,616,616,,,,,,616,616,616,616,616,616,616,616,616,,,616,,,,,',
',,,616,616,,616,616,616,616,616,616,616,,,616,616,,,,616,616,616,616',
',,,,,,,,,,,,,616,616,,616,616,616,616,616,616,616,616,616,616,616,,',
'616,616,,,,,,,,,,616,410,410,410,410,410,410,410,410,410,410,410,410',
'410,410,410,410,410,410,410,410,410,410,410,410,,,,410,410,410,410,410',
'410,410,410,410,410,,,,,,410,410,410,410,410,410,410,410,410,,,410,',
',,,,,,,410,410,,410,410,410,410,410,410,410,,,410,410,,,,410,410,410',
'410,,,,,,,,,,,,,,410,410,,410,410,410,410,410,410,410,410,410,410,410',
',,410,410,,,,,,,,,,410,739,739,739,739,739,739,739,739,739,739,739,739',
'739,739,739,739,739,739,739,739,739,739,739,739,,,,739,739,739,739,739',
'739,739,739,739,739,,,,,,739,739,739,739,739,739,739,739,739,,,739,',
',,,,,,,739,739,,739,739,739,739,739,739,739,,,739,739,,,,739,739,739',
'739,,,,,,,,,,,,,,739,739,,739,739,739,739,739,739,739,739,739,739,739',
',,739,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85',
'85,85,85,,,,85,85,85,85,85,85,85,85,85,85,,,,,,85,85,85,85,85,85,85',
'85,85,85,85,85,,85,,,,,,,85,85,,85,85,85,85,85,85,85,,,85,85,,,,85,85',
'85,85,,,,,,,,,,,,,,85,85,,85,85,85,85,85,85,85,85,85,85,85,,,85,71,71',
'71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,,',
',71,71,71,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,71,71,71,71',
'71,,71,,,,,,,71,71,,71,71,71,71,71,71,71,,,71,71,,,,71,71,71,71,,,,',
',71,,,,,,,,71,71,,71,71,71,71,71,71,71,71,71,71,71,727,727,71,,727,',
',,,,,,,727,727,,727,727,727,727,727,727,727,,,727,727,,,,727,727,727',
'727,,,,,,727,,,,,,,,727,727,,727,727,727,727,727,727,727,727,727,727',
'727,203,203,727,,203,,,,,,,,,203,203,,203,203,203,203,203,203,203,,',
'203,203,,,,203,203,203,203,,,,,,203,,,,,,,,203,203,,203,203,203,203',
'203,203,203,203,203,203,203,455,455,203,,455,,,,,,,,,455,455,,455,455',
'455,455,455,455,455,,,455,455,,,,455,455,455,455,,,,,,455,,,,,,,,455',
'455,,455,455,455,455,455,455,455,455,455,455,455,952,952,455,,952,,',
',,,,,,952,952,,952,952,952,952,952,952,952,,,952,952,,,,952,952,952',
'952,,,,,,952,,,,,,,,952,952,,952,952,952,952,952,952,952,952,952,952',
'952,522,522,952,,522,,,,,,,,,522,522,,522,522,522,522,522,522,522,,',
'522,522,,,,522,522,522,522,,,,,,522,,,,,,,,522,522,,522,522,522,522',
'522,522,522,522,522,522,522,523,523,522,,523,,,,,,,,,523,523,,523,523',
'523,523,523,523,523,,,523,523,,,,523,523,523,523,,,,,,523,,,,,,,,523',
'523,,523,523,523,523,523,523,523,523,523,523,523,204,204,523,,204,,',
',,,,,,204,204,,204,204,204,204,204,204,204,,,204,204,,,,204,204,204',
'204,,,,,,204,,,,,,,,204,204,,204,204,204,204,204,204,204,204,204,204',
'204,252,252,204,,252,,,,,,,,,252,252,,252,252,252,252,252,252,252,,',
'252,252,,,,252,252,252,252,,,,,,,,,,,,,,252,252,,252,252,252,252,252',
'252,252,252,252,252,252,253,253,252,,253,,,,,,,,,253,253,,253,253,253',
'253,253,253,253,,,253,253,,,,253,253,253,253,,,,,,,,,,,,,,253,253,,253',
'253,253,253,253,253,253,253,253,253,253,953,953,253,,953,,,,,,,,,953',
'953,,953,953,953,953,953,953,953,,,953,953,,,,953,953,953,953,,,,,,953',
',,,,,,,953,953,,953,953,953,953,953,953,953,953,953,953,953,535,535',
'953,,535,,,,,,,,,535,535,,535,535,535,535,535,535,535,,,535,535,,,,535',
'535,535,535,,,,,,535,,,,,,,,535,535,,535,535,535,535,535,535,535,535',
'535,535,535,580,580,535,,580,,,,,,,,,580,580,,580,580,580,580,580,580',
'580,,,580,580,,,,580,580,580,580,,,,,,580,,,,,,,,580,580,,580,580,580',
'580,580,580,580,580,580,580,580,579,579,580,,579,,,,,,,,,579,579,,579',
'579,579,579,579,579,579,,,579,579,,,,579,579,579,579,,,,,,579,,,,,,',
',579,579,,579,579,579,579,579,579,579,579,579,579,579,728,728,579,,728',
',,,,,,,,728,728,,728,728,728,728,728,728,728,,,728,728,,,,728,728,728',
'728,,,,,,728,,,,,,,,728,728,,728,728,728,728,728,728,728,728,728,728',
'728,534,534,728,,534,,,,,,,,,534,534,,534,534,534,534,534,534,534,,',
'534,534,,,,534,534,534,534,,,,,,534,,,,,,,,534,534,,534,534,534,534',
'534,534,534,534,534,534,534,,,534,762,762,762,762,762,762,762,762,762',
'762,762,,762,762,,,762,762,,,,,,,,,,,,,,,762,,762,,762,762,762,762,762',
'762,762,,762,680,680,680,680,680,680,680,680,680,680,680,,680,680,,762',
'680,680,,,,,,,,,,,,,,,680,,680,,680,680,680,680,680,680,680,,680,266',
'266,266,266,266,266,266,266,266,266,266,,266,266,,680,266,266,,,,,,',
',,,,,,,,266,,266,,266,266,266,266,266,266,266,,266,750,750,750,750,750',
'750,750,750,750,750,750,,750,750,,266,750,750,,,,,,,,,,,,,,,750,,750',
',750,750,750,750,750,750,750,,750,757,757,757,757,757,757,757,757,757',
'757,757,,757,757,,750,757,757,,,,,,,,,,,,,,,757,,757,,757,757,757,757',
'757,757,757,,757,760,760,760,760,760,760,760,760,760,760,760,,760,760',
',757,760,760,,,,,,,,,,,,,,,760,,760,,760,760,760,760,760,760,760,,760',
'24,24,24,24,24,24,24,24,24,24,24,,24,24,,760,24,24,,,,,,,,,,,,,,,24',
',24,,24,24,24,24,24,24,24,,24,764,764,764,764,764,764,764,764,764,764',
'764,,764,764,,24,764,764,,,,,,,,,,,,,,,764,,764,,764,764,764,764,764',
'764,764,,764,853,853,853,853,853,853,853,853,853,853,853,,853,853,,764',
'853,853,,,,,,,,,,,,,,,853,,853,,853,853,853,853,853,853,853,,853,850',
'850,850,850,850,850,850,850,850,850,850,,850,850,,853,850,850,,,,,,',
',,,,,,,,850,,850,,850,850,850,850,850,850,850,,850,536,536,536,536,536',
'536,536,536,536,536,536,,536,536,,850,536,536,,,,,,,,,,,,,,,536,,536',
',536,536,536,536,536,536,536,,536,755,755,755,755,755,755,755,755,755',
'755,755,,755,755,,536,755,755,,,,,,,,,,,,,,,755,,755,,755,755,755,755',
'755,755,755,,755,442,442,442,442,442,442,442,442,442,442,442,,442,442',
',755,442,442,,,,,,,,,,,,,,,442,,442,,442,442,442,442,442,442,442,,442',
'487,487,487,487,487,487,487,487,487,487,487,,487,487,,442,487,487,,',
',,,,,,,,,,,,487,,487,,487,487,487,487,487,487,487,,487,,,,,,,,,,,,,',
',487,487' ]
        racc_action_check = arr = ::Array.new(23416, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1397,     0,  1393,   nil,   695,   nil,   nil, 20035,  1149,
   nil, 21018, 21142,  1278,   nil,  1254,  1301,   908,   419,  1251,
   823,   nil,   104, 10255, 22973,  1343,   nil,   454,   197,  9875,
  9745,  9631,  8142,  8018,   nil,  3164,  7770,  6894,   nil,  1234,
   398,   396,  1305,   358,  6526,  5284, 15588,  1233,  1038,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   900,   nil,  4912,  5036,
  5160,    56, 20329,  5532,  5656,   nil,   nil,  5780,  5906,  1275,
   nil, 21740,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,
   nil,   nil,   nil,  1219,  1205, 21627,   nil,   nil,   nil,     0,
   nil,   nil,   640,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  7026,   nil,   nil,   nil,   nil,
  7150,  7274,  7398,  7522,  7646,  1214,   nil,   871,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1196,   nil,  2914,
  8266,  8390,  8514, 21862, 22167,  8886,  9010,  9134,  9258,  9382,
  9506,   nil,   nil,  1068,   183,   273,  1262,   295,  1181,  1226,
   nil, 10379,  1789,  1215, 10751, 10875, 20886, 11123, 11247, 11371,
 11495, 11619, 11743, 11867, 11991, 12115, 12239, 12363, 12487, 12611,
 12735, 12859, 12983, 13107, 13231, 13355, 13479, 13603, 13727, 13851,
   nil,   nil, 22228, 22289,  1205, 14347,   nil,  1208,   nil,   nil,
   nil, 14595,   nil,   nil, 14719,   nil, 22793,   nil,  1167,  1156,
   nil, 15216,  1189, 15464,   nil,  4788,   nil,   nil,   565,   nil,
  1289, 15960,  1141,  1289,  1147,  1181,  1134, 16704,  2289,   679,
   480,   518,  1197,   557,   nil,  1159,  1120,     0,   nil,   nil,
   nil,  1155,   742,  1105, 18299,   nil,   426,  1166,  1157,   939,
   nil,  1096,   nil, 19043,  2664,   855,   nil,   430,   574,  1060,
  1041,   nil,   563,  1064,   nil,   nil,    62,   833,   nil,  1019,
  1016,  1001,   nil,   nil,   nil,   nil,   nil,   nil,   993,   nil,
   644,   nil,   nil,   nil,   nil,  1075,   nil,   nil,  1071,   756,
    51,    48, 19415, 19291,   414,  1103,   986,   166,   192,   514,
  1056,   123,  1041,   nil,   nil, 17803,   nil, 17555,   417,   396,
   479,   360,   457,   402,   338,   220,   565,   nil,   490,   nil,
   nil,   nil,   nil,   nil,   407,   nil,   382,   nil,   387,   nil,
   941,   282,   nil,   940,   187,   nil,   255,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  3914,
 21390,   nil,   nil,   nil,   nil,   941,   nil,   924,   nil,  6154,
   911,   nil, 20886,   910,   nil,   nil,   906,   881,   261,   221,
  6640,   nil,   nil,   nil,   260,   385,   910,   nil,   nil,   770,
  1030,   nil, 23243,   nil,   861,   nil,   nil,  6895,   nil,   nil,
   nil,   nil,   114,   nil,   898, 21923, 17188, 16208,    54, 16828,
 17679, 19167,  2914,  2664,   790,   345,   920,   914,   899,   896,
  3914,  4039,  3789,  2289,  2789,  3164,  3539,  2414,  3414,  2164,
  2539,  2039,  3289,   467,   853,  3039,  3664, 23288,   217, 17190,
   nil,   nil, 20397,   nil,   nil,   nil,   nil,   325,   306,   836,
   825,   nil,   nil, 19911,   nil,   nil, 19539,   nil, 16456,   nil,
   nil,   nil, 14223,   980,   809,   794,   nil,   nil,   781,  6402,
   780,  8638, 22045, 22106,   860,   746,   nil,   nil, 10627,   701,
   nil, 13975, 14099, 16952, 22655, 22411, 23153, 18051,   815,   810,
   679,   nil, 19787,   nil,   nil, 20159,   nil,   nil,   nil,   nil,
  3789,  1664,   663,  1591,   nil,  1466,   nil,   nil,  1214, 20638,
   nil,   774,   nil,   651,   378,   nil,   650,   nil,   nil,  3414,
   738,   nil,  2789,   186,   185,   724,   729,   nil, 18919, 22533,
 22472,   159,   nil,   388,   324,   140,   nil,  1066,   nil,    55,
 17431,   nil, 17122,   nil,   nil,   nil, 17307,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   253,   nil,
   nil,   nil,   602,   nil,   593,   nil, 21266,   nil,   546, 16332,
 16084,   434,   551, 15712, 15340, 15092, 14968,   537,   nil,   nil,
   nil, 14844, 14471,   535,   nil, 10007,  9875,   nil,   nil,   235,
   185,   130,   510,   494,  5780,   482,   nil,   nil,   571,   nil,
   nil,   nil,   nil,   nil,   nil,   216,   nil,   nil,   nil,   nil,
   477,   nil,   514,  6278,   nil,   nil,   720,   282,  5408,   471,
   nil,   465,    97,    58,   472,   268,  1267,   453,   372, 10131,
 22748,   432,   410,   226,   461, 15836,   nil,   nil,   415,   358,
   398,   nil,  1150,   271,   228,   195,   nil,   nil,    91,    63,
   nil,    25,   nil,  1023,   576,    35,   633,   nil,   819,   nil,
   234,   nil,   nil,   nil,   nil,   277,   nil, 20283,   229,   116,
   152,   154,    90, 10999,   nil,   482,   nil, 21801, 22594,  6770,
   nil,   nil,   nil,   595,   693,  4664,  4164,  1841,   725, 21514,
   123,  1119,  1414,   nil,   nil,   nil,   nil,   nil,   544, 16580,
 22838, 17076,   nil,   607,   nil, 23198,   nil, 22883,   nil,   nil,
 22928,   nil, 22703,   nil, 23018, 20762, 18795, 18423, 18175,    13,
  8762,   733,   737,   739,   nil,   761,   772,   770,   nil,  3039,
   nil,  4539,  4039,   nil,   nil,   796,   229,   nil,   nil,   941,
   nil,  3664,   826,   872,   nil,   nil,   nil,   nil,   nil,   832,
   nil,   nil,   nil,   nil,  1341,   nil,   nil,  1186,   nil,   604,
   nil,   994,   nil,   nil,   nil,   386,   893,   861,   983,   nil,
 10503,   989,  2414,  4289,   nil,   149,    99,   159,   294,  1142,
   nil,   934,  3289,  7894,   nil,   754,  1066,  1070,   955,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   979,   967,   nil,
 23108, 18547, 18671, 23063,  1966,   nil,   701,   nil,   nil,   864,
   nil,  1031, 20514,  1138,  4414,     9,  1141,   nil,  3539,   nil,
   nil,   124, 19663,   nil,  1036,  1042,  1051,  1071,  1077,  1081,
  1023,  1102,  1031,   nil,   140,   nil,  1229,  1235, 17927,  2039,
   nil,   nil,  1239,   320,   nil,   nil,   nil,   nil,  6572,   nil,
  1125,  1126,  1129,  1130,   nil,  1132,   nil,   687,  1209,   nil,
  1157,   nil,   nil,   nil,  1164,   730,   817,   947,  1223,   974,
   nil,   nil,   nil,   734,   nil,   nil,   nil,   763,  1172,  1539,
   nil,   nil,   nil,   290,  1914,   nil,   nil,  2164,  2539,  1716,
   nil,   nil,  1311,   nil,  1436,   nil,   nil, 20395,   nil,   nil,
  1349,  6030, 21984, 22350,   600,  1238,  1240,   649,   nil,   nil,
   nil,  1362,  1363,  1364,  1245,  1247,  1248,  1250,  1290,  1293,
   nil,  1258,   151,   153,   163,  1157,   nil,   nil,   nil,   nil,
   nil,   nil,   961,   nil,   nil,   nil,   120,  1272,   nil ]

racc_action_default = [
    -1,  -578,  -577,  -578,    -2,  -564,    -4,    -5,  -578,    -8,
    -9,  -578,  -578,  -578,   -29,  -578,  -578,  -578,  -277,  -578,
   -41,   -44,  -566,  -578,   -49,   -51,   -52,   -53,  -258,  -258,
  -258,  -288,  -327,  -328,   -70,  -577,   -74,   -82,   -84,  -578,
  -491,  -492,  -578,  -578,  -578,  -578,  -578,  -566,  -239,  -270,
  -271,  -272,  -273,  -274,  -275,  -276,  -554,  -279,  -578,  -577,
  -577,  -296,  -517,  -578,  -578,  -301,  -304,  -564,  -578,  -312,
  -319,  -578,  -329,  -330,  -433,  -434,  -435,  -436,  -437,  -577,
  -440,  -577,  -577,  -577,  -577,  -577,  -469,  -475,  -476,  -552,
  -480,  -481,  -553,  -483,  -484,  -485,  -486,  -487,  -488,  -489,
  -490,  -495,  -496,   989,    -3,  -565,  -573,  -574,  -575,    -7,
  -578,  -578,  -578,  -578,  -578,  -578,   -17,  -578,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -121,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -122,  -577,
  -578,  -578,  -577,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
  -566,  -567,   -48,  -578,  -491,  -492,  -578,  -277,  -578,  -578,
  -231,  -578,  -577,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
  -398,  -401,  -578,  -578,   -59,  -578,  -295,  -578,  -414,  -417,
   -65,  -577,  -411,   -66,  -566,   -67,  -240,  -253,  -577,  -577,
  -257,  -578,  -263,  -578,  -548,  -578,   -68,   -69,  -564,   -13,
   -14,  -578,   -72,  -577,  -566,  -578,   -75,   -78,  -577,   -90,
   -91,  -578,  -578,   -98,  -288,  -291,  -566,  -404,  -327,  -328,
  -331,  -412,  -578,   -80,  -578,   -86,  -285,  -477,  -478,  -578,
  -216,  -217,  -232,  -578,  -577,  -281,  -241,  -570,  -570,  -578,
  -578,  -546,  -570,  -578,  -297,  -298,  -578,  -517,  -395,  -542,
  -542,  -542,  -516,  -518,  -519,  -520,  -521,  -522,  -523,  -524,
  -578,  -526,  -532,  -534,  -535,  -537,  -538,  -539,  -578,   -50,
  -578,  -578,  -578,  -578,  -564,  -578,  -565,  -491,  -492,  -578,
  -578,  -277,  -578,  -352,  -353,  -578,  -315,  -578,  -113,  -114,
  -154,  -155,  -156,  -172,  -177,  -184,  -187,  -322,  -578,  -491,
  -492,  -543,  -544,  -438,  -578,  -453,  -578,  -455,  -578,  -457,
  -578,  -578,  -445,  -578,  -578,  -451,  -578,  -468,  -470,  -471,
  -472,  -473,    -6,  -576,   -23,   -24,   -25,   -26,   -27,  -577,
  -578,   -19,   -20,   -21,  -123,  -578,   -30,   -39,   -40,  -578,
  -578,   -31,  -197,  -566,  -248,  -249,  -577,  -577,  -555,  -556,
  -258,  -409,  -557,  -558,  -556,  -555,  -258,  -408,  -410,  -557,
  -558,   -37,  -205,   -38,  -578,   -42,   -43,  -195,  -263,   -45,
   -46,   -47,  -566,  -294,  -578,  -578,  -578,  -577,  -285,  -578,
  -578,  -578,  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,
  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,
  -228,  -229,  -230,  -233,  -234,  -235,  -236,  -566,  -577,  -258,
  -555,  -556,  -258,   -56,   -60,  -259,  -405,  -577,  -577,  -566,
  -566,  -290,  -254,  -578,  -262,  -255,  -578,  -260,  -578,  -264,
  -551,   -12,  -565,   -16,  -566,   -71,  -283,   -87,   -76,  -578,
  -566,  -577,  -578,  -578,   -97,  -578,  -477,  -478,  -578,   -83,
   -88,  -578,  -578,  -578,  -578,  -578,  -237,  -578,  -425,  -578,
  -566,  -242,  -572,  -571,  -244,  -572,  -286,  -287,  -547,  -393,
  -577,  -577,  -577,  -578,  -509,  -578,  -512,  -514,  -578,  -578,
  -354,  -578,  -356,  -358,  -365,  -523,  -566,  -536,  -540,  -577,
  -343,  -344,  -577,  -578,  -578,  -578,  -578,  -420,  -577,  -578,
  -578,  -285,  -309,  -108,  -109,  -578,  -111,  -578,  -277,  -578,
  -578,  -320,  -517,  -324,  -562,  -563,  -578,  -439,  -454,  -459,
  -460,  -462,  -441,  -456,  -442,  -458,  -443,  -444,  -578,  -447,
  -449,  -450,  -578,  -474,  -578,   -18,  -578,   -28,  -269,  -578,
  -578,  -413,  -578,  -250,  -252,  -578,  -578,   -61,  -246,  -247,
  -406,  -578,  -578,   -63,  -407,  -578,  -578,  -293,  -568,  -555,
  -556,  -555,  -556,  -566,  -195,  -578,  -382,  -383,  -577,  -385,
  -399,   -54,  -402,   -55,  -403,  -577,  -415,  -418,  -245,  -289,
  -577,  -261,  -265,  -578,  -549,  -550,   -15,   -73,  -578,   -79,
   -85,  -566,  -555,  -556,  -577,   -94,   -96,  -578,   -81,  -578,
  -204,  -214,  -215,  -566,  -577,  -577,  -280,  -282,  -570,  -578,
  -578,  -387,  -578,  -566,  -542,  -542,  -527,  -541,  -542,  -542,
  -533,  -542,  -528,  -566,  -578,  -363,  -578,  -525,  -577,  -345,
  -577,  -302,  -346,  -347,  -305,  -578,  -308,  -578,  -566,  -555,
  -556,  -559,  -284,  -578,  -108,  -109,  -110,  -578,  -578,  -577,
  -313,  -497,  -498,  -578,  -316,  -577,  -577,  -517,  -578,  -578,
  -566,  -578,  -577,  -446,  -448,  -452,   -10,  -124,  -267,  -578,
  -198,  -578,  -569,  -577,   -33,  -200,   -34,  -201,   -62,   -35,
  -203,   -36,  -202,   -64,  -196,  -578,  -578,  -578,  -578,  -413,
  -578,  -542,  -542,  -542,  -381,  -578,  -577,  -523,  -530,  -577,
   -57,  -577,  -577,  -256,  -266,   -77,   -92,   -89,  -292,  -577,
  -350,  -577,  -426,  -577,  -427,  -428,  -243,  -396,  -397,  -388,
  -389,  -391,  -392,  -394,  -578,  -505,  -507,  -578,  -510,  -578,
  -513,  -578,  -515,  -355,  -357,  -361,  -578,  -366,  -578,  -348,
  -578,  -578,  -577,  -577,  -307,  -578,  -413,  -578,  -108,  -109,
  -112,  -566,  -577,  -578,  -500,  -578,  -578,  -578,  -566,  -502,
  -325,  -545,  -461,  -464,  -465,  -466,  -467,  -578,  -268,   -32,
  -199,  -251,  -578,  -238,  -372,  -374,  -578,  -377,  -379,  -578,
  -384,  -578,  -578,  -578,  -577,  -578,  -578,   -11,  -577,  -432,
  -351,  -578,  -578,  -430,  -578,  -542,  -542,  -542,  -542,  -359,
  -578,  -364,  -578,  -299,  -578,  -300,  -578,  -578,  -578,  -577,
  -310,  -413,  -578,  -578,  -317,  -321,  -323,  -501,  -517,  -463,
  -542,  -542,  -542,  -542,  -531,  -542,  -386,  -529,  -578,  -400,
  -578,  -416,  -419,  -431,  -577,   -99,  -100,  -578,  -578,  -107,
  -429,  -390,  -503,  -578,  -506,  -508,  -511,  -578,  -362,  -577,
  -303,  -306,  -265,  -577,  -577,  -314,  -499,  -577,  -577,  -578,
  -369,  -371,  -578,  -375,  -578,  -378,  -380,  -578,  -285,   -58,
  -425,  -577,  -578,  -578,  -106,  -542,  -360,  -577,  -421,  -422,
  -423,  -578,  -578,  -578,  -542,  -542,  -542,  -542,  -284,  -559,
  -424,  -566,  -555,  -556,  -559,  -105,  -504,  -349,  -311,  -318,
  -326,  -367,  -578,  -370,  -373,  -376,  -413,  -542,  -368 ]

clist = [
'6,121,121,328,446,350,351,209,377,354,430,436,576,4,212,684,267,267',
'267,332,124,124,398,9,560,262,539,505,108,9,423,494,313,569,572,116',
'198,300,300,126,126,418,104,105,736,286,696,443,254,260,263,772,404',
'405,406,407,303,316,321,489,492,121,700,711,714,453,268,268,268,300',
'664,818,17,284,282,121,621,385,17,387,389,392,395,387,695,529,698,541',
'544,499,108,789,548,213,317,661,814,566,661,693,802,213,213,213,355',
'17,291,291,109,664,726,800,265,276,277,904,383,821,598,501,650,652,605',
'386,654,609,9,396,213,656,657,540,352,213,213,408,822,213,359,515,817',
'353,823,269,269,269,589,723,591,934,365,832,590,835,937,367,735,592',
'739,898,320,381,362,319,776,616,593,378,864,655,410,318,322,799,364',
'17,197,326,549,773,213,213,213,213,17,505,867,267,664,251,488,416,421',
'779,440,775,441,445,904,431,424,497,781,498,782,402,958,717,793,871',
'314,384,324,388,391,661,661,608,115,394,842,741,742,397,833,694,325',
'2,730,596,1,,715,,,420,,,,,267,420,,,,560,267,,705,267,881,,830,496',
',,,900,,424,,,430,436,,,504,504,552,17,213,213,213,,814,213,213,213',
'213,213,213,525,802,,332,643,,780,300,,268,,17,921,573,574,769,262,',
'268,669,108,513,,696,300,518,637,,678,,700,,530,928,511,512,890,703',
',977,514,282,861,786,213,520,282,,674,285,213,,,213,875,495,,,,959,674',
'744,,,500,,696,,671,938,17,,17,658,659,,291,17,,,956,,,,,300,269,300',
'667,,826,,,291,670,269,108,,,,,,,17,901,674,902,560,,560,575,,,,687',
',,,,121,,,,758,,718,6,622,,763,,,,,664,,,783,124,614,707,213,213,504',
'504,629,970,628,,9,,634,446,615,587,,587,126,,,,267,661,,,440,836,837',
'785,627,431,,,,424,633,,796,,,,,,,,,,,,964,,645,,,,,,,17,,,,,891,629',
'646,628,629,,628,,,,415,646,646,,,879,560,,,,,,267,,889,651,,783,653',
'440,,,,285,431,424,300,,,,,440,794,213,530,300,431,,,666,,674,,530,788',
',,,,,892,,,,803,332,691,,,,914,,,831,813,,,,,267,560,,560,929,,,440',
',,,,431,424,,285,,,,17,285,,,,,,291,960,213,,,,841,712,712,291,,,,,',
',774,121,213,,,,560,731,,,660,754,756,,,17,17,759,761,986,124,445,,622',
',,,,,,,,,,17,747,,17,,126,,691,,213,962,963,,,646,688,,622,,504,,213',
',,,,827,213,,,300,629,,628,634,,,840,530,838,,300,,790,795,,,,,787,',
',,,897,332,213,213,,,,,213,213,622,,213,790,,790,,,,,,267,28,,440,,',
'420,28,,,431,,,424,,121,,,,,,753,28,,291,,,,849,,28,28,28,,28,291,,504',
'825,,,,834,,,674,,839,884,,,,699,,,701,,28,,,691,893,28,28,,971,28,',
',,,,,869,,,,873,,213,,,,,,213,,,,,,17,17,,,,,,17,,,,622,,28,,,213,,28',
'28,28,28,28,,,,,,,,,,,,,,,40,,,689,690,,40,17,712,17,17,,,332,,,894',
'771,,17,,300,708,,,710,,,,,,300,,40,289,289,,,,,,,,,,,,,213,,17,17,',
',,,,,,,17,213,,,,,357,,,379,28,28,28,28,936,,28,28,28,28,28,28,,,,,',
',,790,907,,17,28,267,440,17,,,,917,440,,40,,,431,424,,,,,40,790,622',
',,17,,,,,,,,,28,,,,,,28,,,28,,,,,,,17,,,,,,,,,,28,,28,,,17,,28,,,17',
',,17,17,,,,,41,,876,,,877,41,878,213,,,,,,28,,323,,,,,,,,847,,40,,,',
',,,41,290,290,,,,,,,,,,,,,,40,,,28,28,903,,,905,,,,863,,865,866,,358',
',,380,,,,870,,,,,19,,,,,,19,,,,,,,,,,,,,,,,,,,41,886,887,,,40,28,40',
'19,41,,289,40,,,,,,955,,,,,,,,,,289,,,,,,965,,,966,40,967,,363,,910',
',,,913,,,,315,,417,28,,349,349,,448,349,,,,,,,,933,,,,,,16,,,987,19',
',16,,,,,,,19,,379,,379,,950,41,,,,,,,,,349,349,349,349,16,957,28,,,',
'961,,,,41,28,,,,,,507,,509,,510,,,,,40,28,,,,,,,,,,,,,28,28,,,,,,,,',
',,,,,,,,,28,,,28,,,19,,,28,41,16,41,444,,,290,41,,,16,28,,,,,,28,,19',
',,,290,449,450,451,452,,,,,,41,,,,,,,,,,,,,28,28,,,,,28,28,,,28,,,,40',
',,,,,,289,,,,,,,,,289,,19,,19,,,,380,19,380,,,,,,,,,16,618,,40,40,,',
',,,,,,,,,19,,,,,,40,16,,40,,,,,,,,41,,,,,,,,,,,,,,,,28,,,,,,28,,,,18',
',28,28,,,18,,,28,,,,,,349,349,,28,,,,,16,,16,662,,,323,16,665,,18,293',
'293,,,,,,,,,,,28,,28,28,,,19,,,,16,,28,,,,289,,,662,361,,323,,554,556',
'557,289,,,,41,,,,,702,,290,,,28,,28,28,,,290,,,,,,28,28,,,18,,,,,,,',
',18,,,41,41,,,,,,,,,,,,,40,40,28,,,41,28,40,41,,,,,748,,,,662,323,,',
',16,,,,19,28,,,,,,,,,,,,,,,,,40,,40,40,,,,,28,,,,40,784,,,,,,,19,19',
',28,18,,,683,28,,,28,28,,,792,,,,19,,,19,40,40,28,,18,,,,,,40,,,,,,',
'290,,,,,,,448,,,,290,,,,,,,,,734,16,,379,,40,740,,,40,,,,915,,,,,,848',
',,,,,444,18,,18,,40,,293,18,,,,,,16,16,,,,,,,41,41,293,,,,,41,40,,,16',
'18,,16,,,,,,,,,40,,,,,40,,,40,40,,,,,,,,,,,,41,,41,41,,,,,,,,,41,,,',
',,,588,,588,,,,,,,,,323,,,,19,19,,,,,,19,349,41,41,,,,,,,,,41,,,,,,',
',,,18,,,,932,,,,,,,,,,,19,,19,19,,380,,41,,,,41,19,805,806,916,,808',
'810,,812,,,,,,,,,,,,41,,,,,,,,,,,19,19,,,,,,,,,19,,16,16,41,,,,349,16',
',,,,,,,,,41,,349,,,41,,,41,41,,,,19,,,18,19,855,857,858,920,,293,,,',
'16,,16,16,,293,,,,,,19,16,,,,,,,,,,,,,,,18,18,,,,,,,,19,,,,,,,16,16',
',18,,,18,,19,,16,,,19,,,19,19,,,,,,,,,220,,,,,,,,266,266,266,,,,,,16',
',,,16,310,311,312,,,922,924,925,926,,,,,,,266,266,,,,16,,,,,,,,,,940',
'941,943,945,,946,,,,,,,,,,16,,,,,,,,,,293,,,,,16,,,,,16,293,,16,16,',
',,,,,,,,,,,,,,976,,,,,,,,,981,983,984,985,,,,,,,,,,,,,,,,,,,,988,,,',
',18,18,,,,,846,18,,,,,,,,,,,,,,,,,,,,,,,,,,,266,422,266,,,442,447,,',
',18,,18,18,,,,,,,,220,18,,462,463,464,465,466,467,468,469,470,471,472',
'473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,,,,18,18',
'266,,,,,,266,,18,266,,,,,,,266,,266,,266,,,,,,,,,,,,,,,,,,588,,18,,',
',18,,,,919,,,,,,,,,,536,,,,,,,18,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,,',
',,,,,,18,,,,,18,,,18,18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,442,644,422,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,266,,266,,,,,,,,,,,,,266,',
',,,,,,,,680,681,682,,,,,,,,,266,,,266,,,,,,,,,,,,,,266,,,,,,,,,,,,,',
',,,,,266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,750,,,266,266,755',
'757,,,,,760,762,,,644,764,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,',
',,,,,,,,,266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,266,,,,,',
',,,,,,,,,,,,,,266,,850,,,,,,,,,,,,,,755,757,762,760,,853,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',266,850,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266' ]
        racc_goto_table = arr = ::Array.new(2965, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,58,58,141,20,19,19,33,57,19,38,38,88,2,22,13,35,35,35,133,61,61,57',
'9,125,69,10,71,91,9,25,40,33,85,85,17,17,64,64,62,62,29,5,8,92,50,171',
'29,39,39,39,130,19,19,19,19,51,6,6,38,38,58,172,87,87,48,66,66,66,64',
'177,86,24,47,46,58,26,6,24,6,6,6,6,6,131,52,131,67,67,25,91,14,67,24',
'66,72,124,126,72,135,138,24,24,24,5,24,24,24,7,177,55,137,45,45,45,173',
'157,14,163,48,41,70,163,159,70,163,9,159,24,41,41,96,97,24,24,9,98,24',
'24,48,127,99,100,68,68,68,56,101,56,102,103,104,105,106,107,108,109',
'110,111,112,81,80,89,65,128,63,94,93,43,42,32,68,68,136,21,24,18,139',
'140,131,24,24,24,24,24,71,15,35,177,142,143,22,22,144,58,135,22,22,173',
'69,6,147,148,149,150,7,151,152,153,154,95,158,82,160,161,72,72,162,11',
'164,165,166,167,168,169,170,84,3,90,176,1,,88,,,66,,,,,35,66,,,,125',
'35,,125,35,127,,55,69,,,,130,,6,,,38,38,,,6,6,141,24,24,24,24,,124,24',
'24,24,24,24,24,33,138,,133,25,,41,64,,66,,24,137,19,19,26,69,,66,52',
'91,9,,171,64,51,48,,52,,172,,50,127,5,8,87,126,,86,47,46,135,26,24,47',
'46,,38,12,24,,,24,131,45,,,,14,38,163,,,45,,171,,25,92,24,,24,48,48',
',24,24,,,127,,,,,64,68,64,48,,26,,,24,48,68,91,,,,,,,24,131,38,131,125',
',125,5,,,,48,,,,,58,,,,40,,25,6,33,,40,,,,,177,,,71,61,2,48,24,24,6',
'6,69,13,6,,9,,69,20,17,24,,24,62,,,,35,72,,,58,10,10,52,39,69,,,,6,39',
',67,,,,,,,,,,,,131,,33,,,,,,,24,,,,,26,69,6,6,69,,6,,,,12,6,6,,,125',
'125,,,,,,35,,85,39,,71,39,58,,,,12,69,6,64,,,,,58,29,24,50,64,69,,,9',
',38,,50,48,,,,,,10,,,,48,133,6,,,,85,,,25,48,,,,,35,125,,125,85,,,58',
',,,,69,6,,12,,,,24,12,,,,,,24,88,24,,,,48,91,91,24,,,,,,,133,58,24,',
',,125,91,,,68,22,22,,,24,24,22,22,26,61,22,,33,,,,,,,,,,,24,17,,24,',
'62,,6,,24,10,10,,,6,68,,33,,6,,24,,,,,19,24,,,64,69,,6,69,,,57,50,141',
',64,,6,6,,,,,50,,,,,48,133,24,24,,,,,24,24,33,,24,6,,6,,,,,,35,44,,58',
',,66,44,,,69,,,6,,58,,,,,,68,44,,24,,,,22,,44,44,44,,44,24,,6,66,,,',
'91,,,38,,91,19,,,,129,,,129,,44,,,6,19,44,44,,25,44,,,,,,,6,,,,6,,24',
',,,,,24,,,,,,24,24,,,,,,24,,,,33,,44,,,24,,44,44,44,44,44,,,,,,,,,,',
',,,,53,,,12,12,,53,24,91,24,24,,,133,,,91,129,,24,,64,12,,,12,,,,,,64',
',53,53,53,,,,,,,,,,,,,24,,24,24,,,,,,,,,24,24,,,,,53,,,53,44,44,44,44',
'91,,44,44,44,44,44,44,,,,,,,,6,24,,24,44,35,58,24,,,,24,58,,53,,,69',
'6,,,,,53,6,33,,,24,,,,,,,,,44,,,,,,44,,,44,,,,,,,24,,,,,,,,,,44,,44',
',,24,,44,,,24,,,24,24,,,,,54,,129,,,129,54,129,24,,,,,,44,,30,,,,,,',
',12,,53,,,,,,,54,54,54,,,,,,,,,,,,,,53,,,44,44,129,,,129,,,,12,,12,12',
',54,,,54,,,,12,,,,,28,,,,,,28,,,,,,,,,,,,,,,,,,,54,12,12,,,53,44,53',
'28,54,,53,53,,,,,,129,,,,,,,,,,53,,,,,,129,,,129,53,129,,28,,12,,,,12',
',,,31,,30,44,,31,31,,30,31,,,,,,,,12,,,,,,23,,,129,28,,23,,,,,,,28,',
'53,,53,,12,54,,,,,,,,,31,31,31,31,23,12,44,,,,12,,,,54,44,,,,,,30,,30',
',30,,,,,53,44,,,,,,,,,,,,,44,44,,,,,,,,,,,,,,,,,,44,,,44,,,28,,,44,54',
'23,54,28,,,54,54,,,23,44,,,,,,44,,28,,,,54,31,31,31,31,,,,,,54,,,,,',
',,,,,,,44,44,,,,,44,44,,,44,,,,53,,,,,,,53,,,,,,,,,53,,28,,28,,,,54',
'28,54,,,,,,,,,23,30,,53,53,,,,,,,,,,,,28,,,,,,53,23,,53,,,,,,,,54,,',
',,,,,,,,,,,,,44,,,,,,44,,,,27,,44,44,,,27,,,44,,,,,,31,31,,44,,,,,23',
',23,30,,,30,23,30,,27,27,27,,,,,,,,,,,44,,44,44,,,28,,,,23,,44,,,,53',
',,30,27,,30,,132,132,132,53,,,,54,,,,,30,,54,,,44,,44,44,,,54,,,,,,44',
'44,,,27,,,,,,,,,27,,,54,54,,,,,,,,,,,,,53,53,44,,,54,44,53,54,,,,,30',
',,,30,30,,,,23,,,,28,44,,,,,,,,,,,,,,,,,53,,53,53,,,,,44,,,,53,30,,',
',,,,28,28,,44,27,,,31,44,,,44,44,,,30,,,,28,,,28,53,53,44,,27,,,,,,53',
',,,,,,54,,,,,,,30,,,,54,,,,,,,,,31,23,,53,,53,31,,,53,,,,53,,,,,,30',
',,,,,28,27,,27,,53,,27,27,,,,,,23,23,,,,,,,54,54,27,,,,,54,53,,,23,27',
',23,,,,,,,,,53,,,,,53,,,53,53,,,,,,,,,,,,54,,54,54,,,,,,,,,54,,,,,,',
'27,,27,,,,,,,,,30,,,,28,28,,,,,,28,31,54,54,,,,,,,,,54,,,,,,,,,,27,',
',,30,,,,,,,,,,,28,,28,28,,54,,54,,,,54,28,132,132,54,,132,132,,132,',
',,,,,,,,,,54,,,,,,,,,,,28,28,,,,,,,,,28,,23,23,54,,,,31,23,,,,,,,,,',
'54,,31,,,54,,,54,54,,,,28,,,27,28,132,132,132,28,,27,,,,23,,23,23,,27',
',,,,,28,23,,,,,,,,,,,,,,,27,27,,,,,,,,28,,,,,,,23,23,,27,,,27,,28,,23',
',,28,,,28,28,,,,,,,,,34,,,,,,,,34,34,34,,,,,,23,,,,23,34,34,34,,,132',
'132,132,132,,,,,,,34,34,,,,23,,,,,,,,,,132,132,132,132,,132,,,,,,,,',
',23,,,,,,,,,,27,,,,,23,,,,,23,27,,23,23,,,,,,,,,,,,,,,,132,,,,,,,,,132',
'132,132,132,,,,,,,,,,,,,,,,,,,,132,,,,,27,27,,,,,27,27,,,,,,,,,,,,,',
',,,,,,,,,,,,,34,34,34,,,34,34,,,,27,,27,27,,,,,,,,34,27,,34,34,34,34',
'34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,,',
',27,27,34,,,,,,34,,27,34,,,,,,,34,,34,,34,,,,,,,,,,,,,,,,,,27,,27,,',
',27,,,,27,,,,,,,,,,34,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,',
',,,,27,,,,,27,,,27,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,34,34,34,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,34,,34,,,,,,,,,,,,,34,,,,,,,,,,34',
'34,34,,,,,,,,,34,,,34,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,34,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,34,34,34,34,,,,,34,34,,,34,34',
',,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,34,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,34,,34,,,,,,,,,',
',,,,34,34,34,34,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,34' ]
        racc_goto_check = arr = ::Array.new(2965, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   230,    11,   227,   nil,    37,    -2,   100,    38,    21,
  -288,   208,   295,  -523,  -593,  -603,   nil,    24,   164,   -58,
  -202,   106,    -9,  1188,    70,  -172,  -347,  1444,  1089,  -159,
   969,  1109,    54,   -15,  2013,   -15,   nil,   nil,  -193,    20,
  -223,  -368,  -324,  -612,   713,    81,    39,    38,  -145,   nil,
     9,    19,  -219,   840,  1011,  -475,  -219,   -63,   -10,   nil,
   nil,     9,    28,  -249,     1,   104,    35,  -230,   112,    -4,
  -368,  -242,  -408,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    90,   100,   151,   nil,   164,  -317,  -637,  -510,  -343,    94,
  -361,    23,  -548,    96,  -212,   153,  -184,    67,  -575,    75,
  -572,  -435,  -741,    81,  -579,  -214,  -581,  -740,    85,  -435,
  -220,  -435,  -681,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  -608,  -316,  -243,  -566,  -484,   211,
  -597,  -469,  1187,   -43,   nil,  -453,  -519,  -581,  -592,   115,
  -148,   -59,   164,   -60,  -457,   nil,   nil,   -57,  -454,   -56,
  -453,  -727,  -370,  -477,  -584,   nil,   nil,    39,   132,    42,
   131,   131,  -174,  -266,   135,  -521,  -379,  -379,   138,  -508,
  -328,  -507,  -493,  -741,   nil,   nil,  -153,  -436 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   279,     7,   356,   280,
   nil,   nil,   538,   nil,   819,   nil,   278,   nil,   nil,   nil,
    14,    15,    21,   219,   309,   nil,   nil,   217,   218,   nil,
   272,    20,   nil,   454,    24,    25,    26,    27,   677,   nil,
   nil,   nil,   nil,   nil,   297,   425,    34,   nil,   nil,    36,
    39,    38,   nil,   214,   215,   586,   nil,   123,   433,   122,
   125,    75,    76,   nil,    48,   nil,   426,   nil,   427,   438,
   630,   502,   270,   255,    49,    50,    51,    52,    53,    54,
    55,   nil,   256,    61,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   570,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   562,   339,   nil,   563,   nil,   329,
   nil,   331,   nil,   697,   647,   nil,   nil,   nil,   337,   nil,
   nil,   738,   nil,   nil,   nil,   437,   257,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    74,    77,    78,   nil,   nil,
   nil,   nil,   nil,   603,   nil,   nil,   nil,   nil,   nil,   nil,
   330,   341,   342,   778,   345,   348,   nil,   274 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 140, :_reduce_1,
  2, 138, :_reduce_2,
  2, 139, :_reduce_3,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  3, 141, :_reduce_6,
  2, 141, :_reduce_none,
  1, 144, :_reduce_none,
  0, 148, :_reduce_9,
  5, 144, :_reduce_10,
  4, 147, :_reduce_11,
  2, 149, :_reduce_12,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  3, 153, :_reduce_15,
  2, 153, :_reduce_16,
  0, 169, :_reduce_17,
  4, 146, :_reduce_18,
  3, 146, :_reduce_19,
  3, 146, :_reduce_20,
  3, 146, :_reduce_21,
  2, 146, :_reduce_22,
  3, 146, :_reduce_23,
  3, 146, :_reduce_24,
  3, 146, :_reduce_25,
  3, 146, :_reduce_26,
  3, 146, :_reduce_27,
  4, 146, :_reduce_28,
  1, 146, :_reduce_none,
  3, 146, :_reduce_30,
  3, 146, :_reduce_31,
  6, 146, :_reduce_32,
  5, 146, :_reduce_33,
  5, 146, :_reduce_34,
  5, 146, :_reduce_35,
  5, 146, :_reduce_36,
  3, 146, :_reduce_37,
  3, 146, :_reduce_38,
  3, 146, :_reduce_39,
  3, 146, :_reduce_40,
  1, 146, :_reduce_none,
  3, 157, :_reduce_42,
  3, 157, :_reduce_43,
  1, 168, :_reduce_none,
  3, 168, :_reduce_45,
  3, 168, :_reduce_46,
  3, 168, :_reduce_47,
  2, 168, :_reduce_48,
  1, 168, :_reduce_none,
  1, 156, :_reduce_50,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 173, :_reduce_none,
  4, 173, :_reduce_54,
  4, 173, :_reduce_55,
  0, 179, :_reduce_56,
  0, 180, :_reduce_57,
  6, 177, :_reduce_58,
  2, 172, :_reduce_59,
  3, 172, :_reduce_60,
  4, 172, :_reduce_61,
  5, 172, :_reduce_62,
  4, 172, :_reduce_63,
  5, 172, :_reduce_64,
  2, 172, :_reduce_65,
  2, 172, :_reduce_66,
  2, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 158, :_reduce_none,
  3, 158, :_reduce_71,
  1, 184, :_reduce_none,
  3, 184, :_reduce_73,
  1, 183, :_reduce_74,
  2, 183, :_reduce_75,
  3, 183, :_reduce_76,
  5, 183, :_reduce_77,
  2, 183, :_reduce_78,
  4, 183, :_reduce_79,
  2, 183, :_reduce_80,
  4, 183, :_reduce_81,
  1, 183, :_reduce_82,
  3, 183, :_reduce_83,
  1, 187, :_reduce_none,
  3, 187, :_reduce_85,
  2, 186, :_reduce_86,
  3, 186, :_reduce_87,
  1, 189, :_reduce_88,
  3, 189, :_reduce_89,
  1, 188, :_reduce_90,
  1, 188, :_reduce_91,
  4, 188, :_reduce_92,
  3, 188, :_reduce_93,
  3, 188, :_reduce_94,
  3, 188, :_reduce_95,
  3, 188, :_reduce_96,
  2, 188, :_reduce_97,
  1, 188, :_reduce_98,
  1, 165, :_reduce_99,
  1, 165, :_reduce_100,
  4, 165, :_reduce_101,
  3, 165, :_reduce_102,
  3, 165, :_reduce_103,
  3, 165, :_reduce_104,
  3, 165, :_reduce_105,
  2, 165, :_reduce_106,
  1, 165, :_reduce_107,
  1, 192, :_reduce_108,
  1, 192, :_reduce_none,
  2, 193, :_reduce_110,
  1, 193, :_reduce_111,
  3, 193, :_reduce_112,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_116,
  1, 194, :_reduce_117,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 154, :_reduce_120,
  1, 154, :_reduce_none,
  1, 155, :_reduce_122,
  0, 200, :_reduce_123,
  4, 155, :_reduce_124,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  3, 171, :_reduce_195,
  5, 171, :_reduce_196,
  3, 171, :_reduce_197,
  5, 171, :_reduce_198,
  6, 171, :_reduce_199,
  5, 171, :_reduce_200,
  5, 171, :_reduce_201,
  5, 171, :_reduce_202,
  5, 171, :_reduce_203,
  4, 171, :_reduce_204,
  3, 171, :_reduce_205,
  3, 171, :_reduce_206,
  3, 171, :_reduce_207,
  3, 171, :_reduce_208,
  3, 171, :_reduce_209,
  3, 171, :_reduce_210,
  3, 171, :_reduce_211,
  3, 171, :_reduce_212,
  3, 171, :_reduce_213,
  4, 171, :_reduce_214,
  4, 171, :_reduce_215,
  2, 171, :_reduce_216,
  2, 171, :_reduce_217,
  3, 171, :_reduce_218,
  3, 171, :_reduce_219,
  3, 171, :_reduce_220,
  3, 171, :_reduce_221,
  3, 171, :_reduce_222,
  3, 171, :_reduce_223,
  3, 171, :_reduce_224,
  3, 171, :_reduce_225,
  3, 171, :_reduce_226,
  3, 171, :_reduce_227,
  3, 171, :_reduce_228,
  3, 171, :_reduce_229,
  3, 171, :_reduce_230,
  2, 171, :_reduce_231,
  2, 171, :_reduce_232,
  3, 171, :_reduce_233,
  3, 171, :_reduce_234,
  3, 171, :_reduce_235,
  3, 171, :_reduce_236,
  3, 171, :_reduce_237,
  6, 171, :_reduce_238,
  1, 171, :_reduce_none,
  1, 167, :_reduce_240,
  1, 202, :_reduce_none,
  2, 202, :_reduce_242,
  4, 202, :_reduce_243,
  2, 202, :_reduce_244,
  3, 206, :_reduce_245,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 162, :_reduce_248,
  1, 162, :_reduce_249,
  2, 162, :_reduce_250,
  4, 162, :_reduce_251,
  2, 162, :_reduce_252,
  1, 182, :_reduce_253,
  2, 182, :_reduce_254,
  2, 182, :_reduce_255,
  4, 182, :_reduce_256,
  1, 182, :_reduce_none,
  0, 210, :_reduce_258,
  2, 176, :_reduce_259,
  2, 209, :_reduce_260,
  2, 208, :_reduce_261,
  1, 208, :_reduce_none,
  1, 203, :_reduce_263,
  2, 203, :_reduce_264,
  3, 203, :_reduce_265,
  4, 203, :_reduce_266,
  3, 166, :_reduce_267,
  4, 166, :_reduce_268,
  2, 166, :_reduce_269,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_278,
  0, 232, :_reduce_279,
  4, 201, :_reduce_280,
  0, 233, :_reduce_281,
  4, 201, :_reduce_282,
  3, 201, :_reduce_283,
  3, 201, :_reduce_284,
  2, 201, :_reduce_285,
  3, 201, :_reduce_286,
  3, 201, :_reduce_287,
  1, 201, :_reduce_288,
  4, 201, :_reduce_289,
  3, 201, :_reduce_290,
  1, 201, :_reduce_291,
  5, 201, :_reduce_292,
  4, 201, :_reduce_293,
  3, 201, :_reduce_294,
  2, 201, :_reduce_295,
  1, 201, :_reduce_none,
  2, 201, :_reduce_297,
  2, 201, :_reduce_298,
  6, 201, :_reduce_299,
  6, 201, :_reduce_300,
  0, 234, :_reduce_301,
  0, 235, :_reduce_302,
  7, 201, :_reduce_303,
  0, 236, :_reduce_304,
  0, 237, :_reduce_305,
  7, 201, :_reduce_306,
  5, 201, :_reduce_307,
  4, 201, :_reduce_308,
  0, 238, :_reduce_309,
  0, 239, :_reduce_310,
  9, 201, :_reduce_311,
  0, 240, :_reduce_312,
  0, 241, :_reduce_313,
  7, 201, :_reduce_314,
  0, 242, :_reduce_315,
  0, 243, :_reduce_316,
  0, 244, :_reduce_317,
  9, 201, :_reduce_318,
  0, 245, :_reduce_319,
  0, 246, :_reduce_320,
  6, 201, :_reduce_321,
  0, 247, :_reduce_322,
  6, 201, :_reduce_323,
  0, 248, :_reduce_324,
  0, 249, :_reduce_325,
  9, 201, :_reduce_326,
  1, 201, :_reduce_327,
  1, 201, :_reduce_328,
  1, 201, :_reduce_329,
  1, 201, :_reduce_330,
  1, 161, :_reduce_331,
  1, 250, :_reduce_none,
  1, 251, :_reduce_none,
  1, 252, :_reduce_none,
  1, 253, :_reduce_none,
  1, 254, :_reduce_none,
  1, 255, :_reduce_none,
  1, 256, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 260, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  2, 222, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 223, :_reduce_none,
  5, 223, :_reduce_349,
  1, 151, :_reduce_none,
  2, 151, :_reduce_351,
  1, 226, :_reduce_none,
  1, 226, :_reduce_353,
  1, 261, :_reduce_354,
  3, 261, :_reduce_355,
  1, 264, :_reduce_356,
  3, 264, :_reduce_357,
  1, 263, :_reduce_358,
  4, 263, :_reduce_359,
  6, 263, :_reduce_360,
  3, 263, :_reduce_361,
  5, 263, :_reduce_362,
  2, 263, :_reduce_363,
  4, 263, :_reduce_364,
  1, 263, :_reduce_365,
  3, 263, :_reduce_366,
  6, 265, :_reduce_367,
  8, 265, :_reduce_368,
  4, 265, :_reduce_369,
  6, 265, :_reduce_370,
  4, 265, :_reduce_371,
  2, 265, :_reduce_372,
  6, 265, :_reduce_373,
  2, 265, :_reduce_374,
  4, 265, :_reduce_375,
  6, 265, :_reduce_376,
  2, 265, :_reduce_377,
  4, 265, :_reduce_378,
  2, 265, :_reduce_379,
  4, 265, :_reduce_380,
  1, 265, :_reduce_381,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  3, 271, :_reduce_384,
  1, 271, :_reduce_385,
  4, 271, :_reduce_386,
  1, 272, :_reduce_none,
  2, 272, :_reduce_388,
  1, 273, :_reduce_none,
  3, 273, :_reduce_390,
  1, 274, :_reduce_none,
  1, 274, :_reduce_none,
  2, 221, :_reduce_393,
  4, 276, :_reduce_394,
  1, 276, :_reduce_395,
  3, 277, :_reduce_396,
  3, 277, :_reduce_397,
  0, 280, :_reduce_398,
  0, 281, :_reduce_399,
  6, 279, :_reduce_400,
  2, 174, :_reduce_401,
  4, 174, :_reduce_402,
  4, 174, :_reduce_403,
  0, 283, :_reduce_404,
  3, 220, :_reduce_405,
  4, 220, :_reduce_406,
  4, 220, :_reduce_407,
  3, 220, :_reduce_408,
  3, 220, :_reduce_409,
  3, 220, :_reduce_410,
  2, 220, :_reduce_411,
  1, 220, :_reduce_412,
  4, 220, :_reduce_413,
  0, 284, :_reduce_414,
  0, 285, :_reduce_415,
  6, 219, :_reduce_416,
  0, 286, :_reduce_417,
  0, 287, :_reduce_418,
  6, 219, :_reduce_419,
  0, 289, :_reduce_420,
  6, 225, :_reduce_421,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  6, 150, :_reduce_424,
  0, 150, :_reduce_425,
  1, 290, :_reduce_426,
  1, 290, :_reduce_none,
  1, 290, :_reduce_none,
  2, 291, :_reduce_429,
  1, 291, :_reduce_none,
  2, 152, :_reduce_431,
  1, 152, :_reduce_none,
  1, 211, :_reduce_433,
  1, 211, :_reduce_434,
  1, 211, :_reduce_none,
  1, 212, :_reduce_436,
  1, 293, :_reduce_none,
  2, 293, :_reduce_438,
  3, 294, :_reduce_439,
  1, 294, :_reduce_440,
  3, 213, :_reduce_441,
  3, 214, :_reduce_442,
  3, 215, :_reduce_443,
  3, 215, :_reduce_444,
  1, 298, :_reduce_445,
  3, 298, :_reduce_446,
  1, 299, :_reduce_none,
  2, 299, :_reduce_448,
  3, 216, :_reduce_449,
  3, 216, :_reduce_450,
  1, 301, :_reduce_451,
  3, 301, :_reduce_452,
  1, 295, :_reduce_453,
  2, 295, :_reduce_454,
  1, 296, :_reduce_455,
  2, 296, :_reduce_456,
  1, 297, :_reduce_457,
  2, 297, :_reduce_458,
  1, 300, :_reduce_459,
  0, 303, :_reduce_460,
  3, 300, :_reduce_461,
  0, 304, :_reduce_462,
  4, 300, :_reduce_463,
  1, 302, :_reduce_464,
  1, 302, :_reduce_465,
  1, 302, :_reduce_466,
  1, 302, :_reduce_none,
  2, 198, :_reduce_468,
  1, 198, :_reduce_469,
  1, 305, :_reduce_none,
  1, 305, :_reduce_none,
  1, 305, :_reduce_none,
  1, 305, :_reduce_none,
  3, 199, :_reduce_474,
  1, 292, :_reduce_none,
  1, 292, :_reduce_none,
  2, 292, :_reduce_477,
  2, 292, :_reduce_478,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 191, :_reduce_484,
  1, 191, :_reduce_485,
  1, 191, :_reduce_486,
  1, 191, :_reduce_487,
  1, 191, :_reduce_488,
  1, 191, :_reduce_489,
  1, 191, :_reduce_490,
  1, 217, :_reduce_491,
  1, 217, :_reduce_492,
  1, 160, :_reduce_493,
  1, 160, :_reduce_494,
  1, 164, :_reduce_495,
  1, 164, :_reduce_496,
  1, 227, :_reduce_497,
  0, 306, :_reduce_498,
  4, 227, :_reduce_499,
  2, 227, :_reduce_500,
  3, 229, :_reduce_501,
  2, 229, :_reduce_502,
  6, 278, :_reduce_503,
  8, 278, :_reduce_504,
  4, 278, :_reduce_505,
  6, 278, :_reduce_506,
  4, 278, :_reduce_507,
  6, 278, :_reduce_508,
  2, 278, :_reduce_509,
  4, 278, :_reduce_510,
  6, 278, :_reduce_511,
  2, 278, :_reduce_512,
  4, 278, :_reduce_513,
  2, 278, :_reduce_514,
  4, 278, :_reduce_515,
  1, 278, :_reduce_516,
  0, 278, :_reduce_517,
  1, 275, :_reduce_518,
  1, 275, :_reduce_519,
  1, 275, :_reduce_520,
  1, 275, :_reduce_521,
  1, 262, :_reduce_none,
  1, 262, :_reduce_523,
  1, 308, :_reduce_none,
  3, 308, :_reduce_525,
  1, 266, :_reduce_526,
  3, 266, :_reduce_527,
  3, 309, :_reduce_528,
  3, 310, :_reduce_529,
  1, 267, :_reduce_none,
  3, 267, :_reduce_531,
  1, 307, :_reduce_532,
  3, 307, :_reduce_533,
  1, 311, :_reduce_none,
  1, 311, :_reduce_none,
  2, 268, :_reduce_536,
  1, 268, :_reduce_537,
  1, 312, :_reduce_none,
  1, 312, :_reduce_none,
  2, 270, :_reduce_540,
  2, 269, :_reduce_541,
  0, 269, :_reduce_542,
  1, 230, :_reduce_none,
  0, 313, :_reduce_544,
  4, 230, :_reduce_545,
  1, 218, :_reduce_546,
  2, 218, :_reduce_547,
  1, 205, :_reduce_none,
  3, 205, :_reduce_549,
  3, 314, :_reduce_550,
  2, 314, :_reduce_551,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  0, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 170, :_reduce_none,
  1, 170, :_reduce_none,
  2, 185, :_reduce_none,
  2, 163, :_reduce_none,
  0, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 228, :_reduce_573,
  1, 228, :_reduce_none,
  1, 145, :_reduce_none,
  2, 145, :_reduce_576,
  0, 143, :_reduce_577 ]

racc_reduce_n = 578

racc_shift_n = 989

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAST_TOKEN => 132,
  :tLAMBDA => 133,
  :tLAMBEG => 134,
  :tEQL => 135,
  :tLOWEST => 136 }

racc_nt_base = 137

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tLAMBDA",
  "tLAMBEG",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "f_args",
  "do_block",
  "@26",
  "@27",
  "operation3",
  "@28",
  "@29",
  "@30",
  "@31",
  "@32",
  "cases",
  "@33",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@34",
  "@35",
  "sym",
  "@36",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@37",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3] # TODO: add test?
                      result = nil # TODO: since it isn't supposed to go in the AST
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), nil, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_40(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_43(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_48(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_57(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      self.env.unextend
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                      if val[2] then
                        if result[0] == :block_pass then
                          raise "both block arg and actual block given"
                        end
                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_61(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      if val[4] then
                        if result[0] == :block_pass then # REFACTOR
                          raise "both block arg and actual block given"
                        end
                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_69(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      ary = list_append val[0], s(:splat, val[2])
                      ary.concat val[4][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_79(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_81(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_83(val, _values, result)
                      ary = s(:array, s(:splat))
                      ary.concat val[2][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_97(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_98(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 109 omitted

def _reduce_110(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_111(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_123(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_124(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_216(val, _values, result)
                      if val[1][0] == :lit then
                        result = val[1]
                      else
                        result = new_call val[1], :"+@"
                      end
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_230(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~"
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      lexer.tern.pop
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_245(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 246 omitted

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val[0] << s(:hash, *val[2][1..-1])
                    
    result
end

def _reduce_252(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_253(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_254(val, _values, result)
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

# reduce 257 omitted

def _reduce_258(val, _values, result)
                      result = lexer.cmdarg.stack.dup
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_259(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_264(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

def _reduce_278(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_279(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_280(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_281(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_282(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_287(val, _values, result)
                      result = s(:hash, *val[1].values)
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_291(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_294(val, _values, result)
                      raise "no3: #{val.inspect}"
                    
    result
end

def _reduce_295(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call nil, oper.to_sym
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 296 omitted

def _reduce_297(val, _values, result)
                      call, iter = val[0], val[1]
                      iter.insert 1, call
                      result = iter
                    
    result
end

def _reduce_298(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_299(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_301(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_302(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_304(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_case val[1], val[3]
                    
    result
end

def _reduce_308(val, _values, result)
                      result = new_case nil, val[2]
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_312(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_313(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_314(val, _values, result)
                      result = new_class val
                      self.env.unextend
                    
    result
end

def _reduce_315(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_317(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_module val
                      self.env.unextend
                    
    result
end

def _reduce_322(val, _values, result)
                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      result = lexer.lineno, lexer.src.beginning_of_line?
                    
    result
end

def _reduce_323(val, _values, result)
                      result = new_defn val
                      self.env.unextend
                      self.in_def = false
                    
    result
end

def _reduce_324(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_325(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                    
    result
end

def _reduce_326(val, _values, result)
                      result = new_defs val

                      self.env.unextend
                      self.in_single -= 1
                    
    result
end

def _reduce_327(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_329(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_330(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_331(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

def _reduce_349(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

def _reduce_354(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = block_var val[0], nil, nil
                    
    result
end

def _reduce_359(val, _values, result)
                      raise "no9: #{val.inspect}"
                    
    result
end

def _reduce_360(val, _values, result)
                      raise "no10: #{val.inspect}"
                    
    result
end

def _reduce_361(val, _values, result)
                      raise "no11: #{val.inspect}"
                    
    result
end

def _reduce_362(val, _values, result)
                      raise "no12: #{val.inspect}"
                    
    result
end

def _reduce_363(val, _values, result)
                      raise "no13: #{val.inspect}"
                    
    result
end

def _reduce_364(val, _values, result)
                      raise "no14: #{val.inspect}"
                    
    result
end

def _reduce_365(val, _values, result)
                      raise "no15: #{val.inspect}"
                    
    result
end

def _reduce_366(val, _values, result)
                      raise "no16: #{val.inspect}"
                    
    result
end

def _reduce_367(val, _values, result)
                      result = block_args19 val, "1"
                    
    result
end

def _reduce_368(val, _values, result)
                      result = block_args19 val, "2"
                    
    result
end

def _reduce_369(val, _values, result)
                      result = block_args19 val, "3"
                    
    result
end

def _reduce_370(val, _values, result)
                      result = block_args19 val, "4"
                    
    result
end

def _reduce_371(val, _values, result)
                      result = block_args19 val, "5"
                    
    result
end

def _reduce_372(val, _values, result)
                      result = block_args19 val, "6"
                    
    result
end

def _reduce_373(val, _values, result)
                      result = block_args19 val, "7"
                    
    result
end

def _reduce_374(val, _values, result)
                      result = block_args19 val, "8"
                    
    result
end

def _reduce_375(val, _values, result)
                      result = block_args19 val, "9"
                    
    result
end

def _reduce_376(val, _values, result)
                      result = block_args19 val, "10"
                    
    result
end

def _reduce_377(val, _values, result)
                      result = block_args19 val, "11"
                    
    result
end

def _reduce_378(val, _values, result)
                      result = block_args19 val, "12"
                    
    result
end

def _reduce_379(val, _values, result)
                      result = block_args19 val, "13"
                    
    result
end

def _reduce_380(val, _values, result)
                      result = block_args19 val, "14"
                    
    result
end

def _reduce_381(val, _values, result)
                      result = block_args19 val, "15"
                    
    result
end

# reduce 382 omitted

# reduce 383 omitted

def _reduce_384(val, _values, result)
                      result = val[1] || 0
                    
    result
end

def _reduce_385(val, _values, result)
                      result = 0
                      self.lexer.command_start = true
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[1]
                      result.concat val[2] if val[2]
                    
    result
end

# reduce 387 omitted

def _reduce_388(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 389 omitted

def _reduce_390(val, _values, result)
                      result = val[0] << val[2]
                      raise "no18: #{val.inspect}"
                    
    result
end

# reduce 391 omitted

# reduce 392 omitted

def _reduce_393(val, _values, result)
                      case val[0].size
                      when 1
                        args = 0
                      when 2
                        args = s(:lasgn, val[0][1])
                      else
                        vars = val[0][1..-1].map { |name| s(:lasgn, name) }
                        args = s(:masgn, s(:array, *vars))
                      end

                      call = new_call nil, :lambda
                      result = s(:iter, call, args, val[1])
                    
    result
end

def _reduce_394(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_395(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_396(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_397(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_398(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_399(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_400(val, _values, result)
                      vars   = val[2]
                      body   = val[4]
                      result = new_iter nil, vars, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_401(val, _values, result)
                      raise SyntaxError, "Both block arg and actual block given." if
                        val[0] && val[0][0] == :blockpass

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_402(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_404(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_405(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_406(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_407(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_409(val, _values, result)
                      result = new_call val[0], :call
                    
    result
end

def _reduce_410(val, _values, result)
                      result = new_call val[0], :call
                    
    result
end

def _reduce_411(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_412(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_414(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_415(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_416(val, _values, result)
                      # REFACTOR
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_417(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_418(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_419(val, _values, result)
                      args = val[2]
                      body = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 422 omitted

# reduce 423 omitted

def _reduce_424(val, _values, result)
                      klasses, var, body, rest = val[1], val[2], val[4], val[5]

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_425(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_426(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 427 omitted

# reduce 428 omitted

def _reduce_429(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 430 omitted

def _reduce_431(val, _values, result)
                      if (val[1] != nil) then
                        result = val[1]
                      else
                        result = s(:nil)
                      end
                    
    result
end

# reduce 432 omitted

def _reduce_433(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_434(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_441(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_443(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_444(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_446(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0] << word
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_449(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_450(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_451(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[0] << s(:str, val[1])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_454(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_456(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_458(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_461(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                      lexer.cond.push false
                      lexer.cmdarg.push false
                    
    result
end

def _reduce_463(val, _values, result)
                      lexer.lex_strterm = val[1]
                      lexer.cond.lexpop
                      lexer.cmdarg.lexpop

                      case val[2]
                      when Sexp then
                        case val[2][0]
                        when :str, :dstr, :evstr then
                          result = val[2]
                        else
                          result = s(:evstr, val[2])
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown rescue body: #{val[2].inspect}"
                      end
                    
    result
end

def _reduce_464(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_465(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_466(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 470 omitted

# reduce 471 omitted

# reduce 472 omitted

# reduce 473 omitted

def _reduce_474(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      yyerror "empty symbol literal" if
                        result.nil? or result.empty?

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.intern)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 475 omitted

# reduce 476 omitted

def _reduce_477(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_478(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 479 omitted

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

def _reduce_484(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_485(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_486(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_487(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_488(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:lit, lexer.src.current_line) 
    result
end

def _reduce_490(val, _values, result)
 result = s(:str, "Unsupported!") 
    result
end

def _reduce_491(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_492(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_493(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_494(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_495(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_496(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_497(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_498(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_499(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_500(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_501(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_502(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_503(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_504(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_505(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_506(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_507(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_508(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_509(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_510(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_511(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_512(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_513(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_514(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_515(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_516(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_517(val, _values, result)
                      result = args19 val
                    
    result
end

def _reduce_518(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_519(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_520(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_521(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 522 omitted

def _reduce_523(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 524 omitted

def _reduce_525(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_526(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0].to_sym
                      when Sexp then
                        result = val[0]
                      else
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_527(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_528(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_529(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

# reduce 530 omitted

def _reduce_531(val, _values, result)
                      raise "no22: #{val.inspect}"
                    
    result
end

def _reduce_532(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_533(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 534 omitted

# reduce 535 omitted

def _reduce_536(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_537(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 538 omitted

# reduce 539 omitted

def _reduce_540(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = s(:block_arg, identifier.to_sym)
                    
    result
end

def _reduce_541(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_542(val, _values, result)
                      result = nil
                    
    result
end

# reduce 543 omitted

def _reduce_544(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_545(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_546(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_547(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 548 omitted

def _reduce_549(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_550(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_551(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

# reduce 552 omitted

# reduce 553 omitted

# reduce 554 omitted

# reduce 555 omitted

# reduce 556 omitted

# reduce 557 omitted

# reduce 558 omitted

# reduce 559 omitted

# reduce 560 omitted

# reduce 561 omitted

# reduce 562 omitted

# reduce 563 omitted

# reduce 564 omitted

# reduce 565 omitted

# reduce 566 omitted

# reduce 567 omitted

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

def _reduce_573(val, _values, result)
 yyerrok 
    result
end

# reduce 574 omitted

# reduce 575 omitted

def _reduce_576(val, _values, result)
 yyerrok 
    result
end

def _reduce_577(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby19Parser
